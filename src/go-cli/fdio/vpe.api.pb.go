// Code generated by protoc-gen-gogo.
// source: vpe.api.proto
// DO NOT EDIT!

package fdio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CvlApiCreateVlanSubifT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex   int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	VlanId      int32 `protobuf:"varint,5,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (m *CvlApiCreateVlanSubifT) Reset()                    { *m = CvlApiCreateVlanSubifT{} }
func (m *CvlApiCreateVlanSubifT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiCreateVlanSubifT) ProtoMessage()               {}
func (*CvlApiCreateVlanSubifT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{0} }

func (m *CvlApiCreateVlanSubifT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCreateVlanSubifT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiCreateVlanSubifT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCreateVlanSubifT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiCreateVlanSubifT) GetVlanId() int32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

type CvlApiCreateVlanSubifReplyT struct {
	XVlMsgId  int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context   int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval    int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	SwIfIndex int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
}

func (m *CvlApiCreateVlanSubifReplyT) Reset()         { *m = CvlApiCreateVlanSubifReplyT{} }
func (m *CvlApiCreateVlanSubifReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiCreateVlanSubifReplyT) ProtoMessage()    {}
func (*CvlApiCreateVlanSubifReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{1}
}

func (m *CvlApiCreateVlanSubifReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCreateVlanSubifReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCreateVlanSubifReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiCreateVlanSubifReplyT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

type CvlApiSwInterfaceSetMplsEnableT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex   int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	Enable      int32 `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *CvlApiSwInterfaceSetMplsEnableT) Reset()         { *m = CvlApiSwInterfaceSetMplsEnableT{} }
func (m *CvlApiSwInterfaceSetMplsEnableT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSwInterfaceSetMplsEnableT) ProtoMessage()    {}
func (*CvlApiSwInterfaceSetMplsEnableT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{2}
}

func (m *CvlApiSwInterfaceSetMplsEnableT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetMplsEnableT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetMplsEnableT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSwInterfaceSetMplsEnableT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetMplsEnableT) GetEnable() int32 {
	if m != nil {
		return m.Enable
	}
	return 0
}

type CvlApiSwInterfaceSetMplsEnableReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiSwInterfaceSetMplsEnableReplyT) Reset()         { *m = CvlApiSwInterfaceSetMplsEnableReplyT{} }
func (m *CvlApiSwInterfaceSetMplsEnableReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSwInterfaceSetMplsEnableReplyT) ProtoMessage()    {}
func (*CvlApiSwInterfaceSetMplsEnableReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{3}
}

func (m *CvlApiSwInterfaceSetMplsEnableReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetMplsEnableReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSwInterfaceSetMplsEnableReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiProxyArpAddDelT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	VrfId       int32    `protobuf:"varint,4,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	IsAdd       int32    `protobuf:"varint,5,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	LowAddress  [][]byte `protobuf:"bytes,6,rep,name=low_address,json=lowAddress" json:"low_address,omitempty"`
	HiAddress   [][]byte `protobuf:"bytes,7,rep,name=hi_address,json=hiAddress" json:"hi_address,omitempty"`
}

func (m *CvlApiProxyArpAddDelT) Reset()                    { *m = CvlApiProxyArpAddDelT{} }
func (m *CvlApiProxyArpAddDelT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiProxyArpAddDelT) ProtoMessage()               {}
func (*CvlApiProxyArpAddDelT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{4} }

func (m *CvlApiProxyArpAddDelT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiProxyArpAddDelT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiProxyArpAddDelT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiProxyArpAddDelT) GetVrfId() int32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *CvlApiProxyArpAddDelT) GetIsAdd() int32 {
	if m != nil {
		return m.IsAdd
	}
	return 0
}

func (m *CvlApiProxyArpAddDelT) GetLowAddress() [][]byte {
	if m != nil {
		return m.LowAddress
	}
	return nil
}

func (m *CvlApiProxyArpAddDelT) GetHiAddress() [][]byte {
	if m != nil {
		return m.HiAddress
	}
	return nil
}

type CvlApiProxyArpAddDelReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiProxyArpAddDelReplyT) Reset()                    { *m = CvlApiProxyArpAddDelReplyT{} }
func (m *CvlApiProxyArpAddDelReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiProxyArpAddDelReplyT) ProtoMessage()               {}
func (*CvlApiProxyArpAddDelReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{5} }

func (m *CvlApiProxyArpAddDelReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiProxyArpAddDelReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiProxyArpAddDelReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiProxyArpIntfcEnableDisableT struct {
	XVlMsgId      int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex   int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context       int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex     int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	EnableDisable int32 `protobuf:"varint,5,opt,name=enable_disable,json=enableDisable,proto3" json:"enable_disable,omitempty"`
}

func (m *CvlApiProxyArpIntfcEnableDisableT) Reset()         { *m = CvlApiProxyArpIntfcEnableDisableT{} }
func (m *CvlApiProxyArpIntfcEnableDisableT) String() string { return proto.CompactTextString(m) }
func (*CvlApiProxyArpIntfcEnableDisableT) ProtoMessage()    {}
func (*CvlApiProxyArpIntfcEnableDisableT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{6}
}

func (m *CvlApiProxyArpIntfcEnableDisableT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiProxyArpIntfcEnableDisableT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiProxyArpIntfcEnableDisableT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiProxyArpIntfcEnableDisableT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiProxyArpIntfcEnableDisableT) GetEnableDisable() int32 {
	if m != nil {
		return m.EnableDisable
	}
	return 0
}

type CvlApiProxyArpIntfcEnableDisableReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiProxyArpIntfcEnableDisableReplyT) Reset() {
	*m = CvlApiProxyArpIntfcEnableDisableReplyT{}
}
func (m *CvlApiProxyArpIntfcEnableDisableReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiProxyArpIntfcEnableDisableReplyT) ProtoMessage()    {}
func (*CvlApiProxyArpIntfcEnableDisableReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{7}
}

func (m *CvlApiProxyArpIntfcEnableDisableReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiProxyArpIntfcEnableDisableReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiProxyArpIntfcEnableDisableReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiResetVrfT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	IsIpv6      int32 `protobuf:"varint,4,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
	VrfId       int32 `protobuf:"varint,5,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
}

func (m *CvlApiResetVrfT) Reset()                    { *m = CvlApiResetVrfT{} }
func (m *CvlApiResetVrfT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiResetVrfT) ProtoMessage()               {}
func (*CvlApiResetVrfT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{8} }

func (m *CvlApiResetVrfT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiResetVrfT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiResetVrfT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiResetVrfT) GetIsIpv6() int32 {
	if m != nil {
		return m.IsIpv6
	}
	return 0
}

func (m *CvlApiResetVrfT) GetVrfId() int32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

type CvlApiResetVrfReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiResetVrfReplyT) Reset()                    { *m = CvlApiResetVrfReplyT{} }
func (m *CvlApiResetVrfReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiResetVrfReplyT) ProtoMessage()               {}
func (*CvlApiResetVrfReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{9} }

func (m *CvlApiResetVrfReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiResetVrfReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiResetVrfReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiIsAddressReachableT struct {
	XVlMsgId         int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex      int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context          int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	NextHopSwIfIndex int32    `protobuf:"varint,4,opt,name=next_hop_sw_if_index,json=nextHopSwIfIndex,proto3" json:"next_hop_sw_if_index,omitempty"`
	IsKnown          int32    `protobuf:"varint,5,opt,name=is_known,json=isKnown,proto3" json:"is_known,omitempty"`
	IsIpv6           int32    `protobuf:"varint,6,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
	IsError          int32    `protobuf:"varint,7,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	Address          [][]byte `protobuf:"bytes,8,rep,name=address" json:"address,omitempty"`
}

func (m *CvlApiIsAddressReachableT) Reset()                    { *m = CvlApiIsAddressReachableT{} }
func (m *CvlApiIsAddressReachableT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIsAddressReachableT) ProtoMessage()               {}
func (*CvlApiIsAddressReachableT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{10} }

func (m *CvlApiIsAddressReachableT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIsAddressReachableT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiIsAddressReachableT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIsAddressReachableT) GetNextHopSwIfIndex() int32 {
	if m != nil {
		return m.NextHopSwIfIndex
	}
	return 0
}

func (m *CvlApiIsAddressReachableT) GetIsKnown() int32 {
	if m != nil {
		return m.IsKnown
	}
	return 0
}

func (m *CvlApiIsAddressReachableT) GetIsIpv6() int32 {
	if m != nil {
		return m.IsIpv6
	}
	return 0
}

func (m *CvlApiIsAddressReachableT) GetIsError() int32 {
	if m != nil {
		return m.IsError
	}
	return 0
}

func (m *CvlApiIsAddressReachableT) GetAddress() [][]byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type CvlApiWantStatsT struct {
	XVlMsgId      int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex   int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context       int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	EnableDisable int32 `protobuf:"varint,4,opt,name=enable_disable,json=enableDisable,proto3" json:"enable_disable,omitempty"`
	Pid           int32 `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (m *CvlApiWantStatsT) Reset()                    { *m = CvlApiWantStatsT{} }
func (m *CvlApiWantStatsT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiWantStatsT) ProtoMessage()               {}
func (*CvlApiWantStatsT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{11} }

func (m *CvlApiWantStatsT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiWantStatsT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiWantStatsT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiWantStatsT) GetEnableDisable() int32 {
	if m != nil {
		return m.EnableDisable
	}
	return 0
}

func (m *CvlApiWantStatsT) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type CvlApiWantStatsReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiWantStatsReplyT) Reset()                    { *m = CvlApiWantStatsReplyT{} }
func (m *CvlApiWantStatsReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiWantStatsReplyT) ProtoMessage()               {}
func (*CvlApiWantStatsReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{12} }

func (m *CvlApiWantStatsReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiWantStatsReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiWantStatsReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiIp4FibCounterT struct {
	Address       int32 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressLength int32 `protobuf:"varint,2,opt,name=address_length,json=addressLength,proto3" json:"address_length,omitempty"`
	Packets       int64 `protobuf:"varint,3,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes         int64 `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *CvlApiIp4FibCounterT) Reset()                    { *m = CvlApiIp4FibCounterT{} }
func (m *CvlApiIp4FibCounterT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIp4FibCounterT) ProtoMessage()               {}
func (*CvlApiIp4FibCounterT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{13} }

func (m *CvlApiIp4FibCounterT) GetAddress() int32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *CvlApiIp4FibCounterT) GetAddressLength() int32 {
	if m != nil {
		return m.AddressLength
	}
	return 0
}

func (m *CvlApiIp4FibCounterT) GetPackets() int64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *CvlApiIp4FibCounterT) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type CvlApiVnetIp4FibCountersT struct {
	XVlMsgId int32                   `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	VrfId    int32                   `protobuf:"varint,2,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	Count    int32                   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	C        []*CvlApiIp4FibCounterT `protobuf:"bytes,4,rep,name=c" json:"c,omitempty"`
}

func (m *CvlApiVnetIp4FibCountersT) Reset()                    { *m = CvlApiVnetIp4FibCountersT{} }
func (m *CvlApiVnetIp4FibCountersT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiVnetIp4FibCountersT) ProtoMessage()               {}
func (*CvlApiVnetIp4FibCountersT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{14} }

func (m *CvlApiVnetIp4FibCountersT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiVnetIp4FibCountersT) GetVrfId() int32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *CvlApiVnetIp4FibCountersT) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CvlApiVnetIp4FibCountersT) GetC() []*CvlApiIp4FibCounterT {
	if m != nil {
		return m.C
	}
	return nil
}

type CvlApiIp4NbrCounterT struct {
	Address  int32 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	LinkType int32 `protobuf:"varint,2,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	Packets  int64 `protobuf:"varint,3,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes    int64 `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *CvlApiIp4NbrCounterT) Reset()                    { *m = CvlApiIp4NbrCounterT{} }
func (m *CvlApiIp4NbrCounterT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIp4NbrCounterT) ProtoMessage()               {}
func (*CvlApiIp4NbrCounterT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{15} }

func (m *CvlApiIp4NbrCounterT) GetAddress() int32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *CvlApiIp4NbrCounterT) GetLinkType() int32 {
	if m != nil {
		return m.LinkType
	}
	return 0
}

func (m *CvlApiIp4NbrCounterT) GetPackets() int64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *CvlApiIp4NbrCounterT) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type CvlApiVnetIp4NbrCountersT struct {
	XVlMsgId  int32                   `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Count     int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	SwIfIndex int32                   `protobuf:"varint,3,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	Begin     int32                   `protobuf:"varint,4,opt,name=begin,proto3" json:"begin,omitempty"`
	C         []*CvlApiIp4NbrCounterT `protobuf:"bytes,5,rep,name=c" json:"c,omitempty"`
}

func (m *CvlApiVnetIp4NbrCountersT) Reset()                    { *m = CvlApiVnetIp4NbrCountersT{} }
func (m *CvlApiVnetIp4NbrCountersT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiVnetIp4NbrCountersT) ProtoMessage()               {}
func (*CvlApiVnetIp4NbrCountersT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{16} }

func (m *CvlApiVnetIp4NbrCountersT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiVnetIp4NbrCountersT) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CvlApiVnetIp4NbrCountersT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiVnetIp4NbrCountersT) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *CvlApiVnetIp4NbrCountersT) GetC() []*CvlApiIp4NbrCounterT {
	if m != nil {
		return m.C
	}
	return nil
}

type CvlApiIp6FibCounterT struct {
	Address       []int64 `protobuf:"varint,1,rep,packed,name=address" json:"address,omitempty"`
	AddressLength int32   `protobuf:"varint,2,opt,name=address_length,json=addressLength,proto3" json:"address_length,omitempty"`
	Packets       int64   `protobuf:"varint,3,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes         int64   `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *CvlApiIp6FibCounterT) Reset()                    { *m = CvlApiIp6FibCounterT{} }
func (m *CvlApiIp6FibCounterT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIp6FibCounterT) ProtoMessage()               {}
func (*CvlApiIp6FibCounterT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{17} }

func (m *CvlApiIp6FibCounterT) GetAddress() []int64 {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CvlApiIp6FibCounterT) GetAddressLength() int32 {
	if m != nil {
		return m.AddressLength
	}
	return 0
}

func (m *CvlApiIp6FibCounterT) GetPackets() int64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *CvlApiIp6FibCounterT) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type CvlApiVnetIp6FibCountersT struct {
	XVlMsgId int32                   `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	VrfId    int32                   `protobuf:"varint,2,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	Count    int32                   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	C        []*CvlApiIp6FibCounterT `protobuf:"bytes,4,rep,name=c" json:"c,omitempty"`
}

func (m *CvlApiVnetIp6FibCountersT) Reset()                    { *m = CvlApiVnetIp6FibCountersT{} }
func (m *CvlApiVnetIp6FibCountersT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiVnetIp6FibCountersT) ProtoMessage()               {}
func (*CvlApiVnetIp6FibCountersT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{18} }

func (m *CvlApiVnetIp6FibCountersT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiVnetIp6FibCountersT) GetVrfId() int32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *CvlApiVnetIp6FibCountersT) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CvlApiVnetIp6FibCountersT) GetC() []*CvlApiIp6FibCounterT {
	if m != nil {
		return m.C
	}
	return nil
}

type CvlApiIp6NbrCounterT struct {
	Address  []int64 `protobuf:"varint,1,rep,packed,name=address" json:"address,omitempty"`
	LinkType int32   `protobuf:"varint,2,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	Packets  int64   `protobuf:"varint,3,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes    int64   `protobuf:"varint,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *CvlApiIp6NbrCounterT) Reset()                    { *m = CvlApiIp6NbrCounterT{} }
func (m *CvlApiIp6NbrCounterT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIp6NbrCounterT) ProtoMessage()               {}
func (*CvlApiIp6NbrCounterT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{19} }

func (m *CvlApiIp6NbrCounterT) GetAddress() []int64 {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CvlApiIp6NbrCounterT) GetLinkType() int32 {
	if m != nil {
		return m.LinkType
	}
	return 0
}

func (m *CvlApiIp6NbrCounterT) GetPackets() int64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *CvlApiIp6NbrCounterT) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

type CvlApiVnetIp6NbrCountersT struct {
	XVlMsgId  int32                   `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Count     int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	SwIfIndex int32                   `protobuf:"varint,3,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	Begin     int32                   `protobuf:"varint,4,opt,name=begin,proto3" json:"begin,omitempty"`
	C         []*CvlApiIp6NbrCounterT `protobuf:"bytes,5,rep,name=c" json:"c,omitempty"`
}

func (m *CvlApiVnetIp6NbrCountersT) Reset()                    { *m = CvlApiVnetIp6NbrCountersT{} }
func (m *CvlApiVnetIp6NbrCountersT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiVnetIp6NbrCountersT) ProtoMessage()               {}
func (*CvlApiVnetIp6NbrCountersT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{20} }

func (m *CvlApiVnetIp6NbrCountersT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiVnetIp6NbrCountersT) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CvlApiVnetIp6NbrCountersT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiVnetIp6NbrCountersT) GetBegin() int32 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *CvlApiVnetIp6NbrCountersT) GetC() []*CvlApiIp6NbrCounterT {
	if m != nil {
		return m.C
	}
	return nil
}

type CvlApiVnetGetSummaryStatsT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *CvlApiVnetGetSummaryStatsT) Reset()         { *m = CvlApiVnetGetSummaryStatsT{} }
func (m *CvlApiVnetGetSummaryStatsT) String() string { return proto.CompactTextString(m) }
func (*CvlApiVnetGetSummaryStatsT) ProtoMessage()    {}
func (*CvlApiVnetGetSummaryStatsT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{21}
}

func (m *CvlApiVnetGetSummaryStatsT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiVnetGetSummaryStatsT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiVnetGetSummaryStatsT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

type CvlApiVnetSummaryStatsReplyT struct {
	XVlMsgId   int32   `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context    int32   `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval     int32   `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	TotalPkts  []int64 `protobuf:"varint,4,rep,packed,name=total_pkts,json=totalPkts" json:"total_pkts,omitempty"`
	TotalBytes []int64 `protobuf:"varint,5,rep,packed,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	VectorRate float64 `protobuf:"fixed64,6,opt,name=vector_rate,json=vectorRate,proto3" json:"vector_rate,omitempty"`
}

func (m *CvlApiVnetSummaryStatsReplyT) Reset()         { *m = CvlApiVnetSummaryStatsReplyT{} }
func (m *CvlApiVnetSummaryStatsReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiVnetSummaryStatsReplyT) ProtoMessage()    {}
func (*CvlApiVnetSummaryStatsReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{22}
}

func (m *CvlApiVnetSummaryStatsReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiVnetSummaryStatsReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiVnetSummaryStatsReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiVnetSummaryStatsReplyT) GetTotalPkts() []int64 {
	if m != nil {
		return m.TotalPkts
	}
	return nil
}

func (m *CvlApiVnetSummaryStatsReplyT) GetTotalBytes() []int64 {
	if m != nil {
		return m.TotalBytes
	}
	return nil
}

func (m *CvlApiVnetSummaryStatsReplyT) GetVectorRate() float64 {
	if m != nil {
		return m.VectorRate
	}
	return 0
}

type CvlApiOamEventT struct {
	XVlMsgId   int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	DstAddress [][]byte `protobuf:"bytes,2,rep,name=dst_address,json=dstAddress" json:"dst_address,omitempty"`
	State      int32    `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CvlApiOamEventT) Reset()                    { *m = CvlApiOamEventT{} }
func (m *CvlApiOamEventT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiOamEventT) ProtoMessage()               {}
func (*CvlApiOamEventT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{23} }

func (m *CvlApiOamEventT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiOamEventT) GetDstAddress() [][]byte {
	if m != nil {
		return m.DstAddress
	}
	return nil
}

func (m *CvlApiOamEventT) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CvlApiWantOamEventsT struct {
	XVlMsgId      int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex   int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context       int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	EnableDisable int32 `protobuf:"varint,4,opt,name=enable_disable,json=enableDisable,proto3" json:"enable_disable,omitempty"`
	Pid           int32 `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (m *CvlApiWantOamEventsT) Reset()                    { *m = CvlApiWantOamEventsT{} }
func (m *CvlApiWantOamEventsT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiWantOamEventsT) ProtoMessage()               {}
func (*CvlApiWantOamEventsT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{24} }

func (m *CvlApiWantOamEventsT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiWantOamEventsT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiWantOamEventsT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiWantOamEventsT) GetEnableDisable() int32 {
	if m != nil {
		return m.EnableDisable
	}
	return 0
}

func (m *CvlApiWantOamEventsT) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type CvlApiWantOamEventsReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiWantOamEventsReplyT) Reset()                    { *m = CvlApiWantOamEventsReplyT{} }
func (m *CvlApiWantOamEventsReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiWantOamEventsReplyT) ProtoMessage()               {}
func (*CvlApiWantOamEventsReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{25} }

func (m *CvlApiWantOamEventsReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiWantOamEventsReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiWantOamEventsReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiOamAddDelT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	VrfId       int32    `protobuf:"varint,4,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	SrcAddress  [][]byte `protobuf:"bytes,5,rep,name=src_address,json=srcAddress" json:"src_address,omitempty"`
	DstAddress  [][]byte `protobuf:"bytes,6,rep,name=dst_address,json=dstAddress" json:"dst_address,omitempty"`
	IsAdd       int32    `protobuf:"varint,7,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
}

func (m *CvlApiOamAddDelT) Reset()                    { *m = CvlApiOamAddDelT{} }
func (m *CvlApiOamAddDelT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiOamAddDelT) ProtoMessage()               {}
func (*CvlApiOamAddDelT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{26} }

func (m *CvlApiOamAddDelT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiOamAddDelT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiOamAddDelT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiOamAddDelT) GetVrfId() int32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *CvlApiOamAddDelT) GetSrcAddress() [][]byte {
	if m != nil {
		return m.SrcAddress
	}
	return nil
}

func (m *CvlApiOamAddDelT) GetDstAddress() [][]byte {
	if m != nil {
		return m.DstAddress
	}
	return nil
}

func (m *CvlApiOamAddDelT) GetIsAdd() int32 {
	if m != nil {
		return m.IsAdd
	}
	return 0
}

type CvlApiOamAddDelReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiOamAddDelReplyT) Reset()                    { *m = CvlApiOamAddDelReplyT{} }
func (m *CvlApiOamAddDelReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiOamAddDelReplyT) ProtoMessage()               {}
func (*CvlApiOamAddDelReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{27} }

func (m *CvlApiOamAddDelReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiOamAddDelReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiOamAddDelReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiResetFibT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	VrfId       int32 `protobuf:"varint,4,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	IsIpv6      int32 `protobuf:"varint,5,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
}

func (m *CvlApiResetFibT) Reset()                    { *m = CvlApiResetFibT{} }
func (m *CvlApiResetFibT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiResetFibT) ProtoMessage()               {}
func (*CvlApiResetFibT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{28} }

func (m *CvlApiResetFibT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiResetFibT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiResetFibT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiResetFibT) GetVrfId() int32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *CvlApiResetFibT) GetIsIpv6() int32 {
	if m != nil {
		return m.IsIpv6
	}
	return 0
}

type CvlApiResetFibReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiResetFibReplyT) Reset()                    { *m = CvlApiResetFibReplyT{} }
func (m *CvlApiResetFibReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiResetFibReplyT) ProtoMessage()               {}
func (*CvlApiResetFibReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{29} }

func (m *CvlApiResetFibReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiResetFibReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiResetFibReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiCreateLoopbackT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	MacAddress  [][]byte `protobuf:"bytes,4,rep,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *CvlApiCreateLoopbackT) Reset()                    { *m = CvlApiCreateLoopbackT{} }
func (m *CvlApiCreateLoopbackT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiCreateLoopbackT) ProtoMessage()               {}
func (*CvlApiCreateLoopbackT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{30} }

func (m *CvlApiCreateLoopbackT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCreateLoopbackT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiCreateLoopbackT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCreateLoopbackT) GetMacAddress() [][]byte {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

type CvlApiCreateLoopbackReplyT struct {
	XVlMsgId  int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context   int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval    int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	SwIfIndex int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
}

func (m *CvlApiCreateLoopbackReplyT) Reset()         { *m = CvlApiCreateLoopbackReplyT{} }
func (m *CvlApiCreateLoopbackReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiCreateLoopbackReplyT) ProtoMessage()    {}
func (*CvlApiCreateLoopbackReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{31}
}

func (m *CvlApiCreateLoopbackReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCreateLoopbackReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCreateLoopbackReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiCreateLoopbackReplyT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

type CvlApiCreateLoopbackInstanceT struct {
	XVlMsgId     int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex  int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context      int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	MacAddress   [][]byte `protobuf:"bytes,4,rep,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
	IsSpecified  int32    `protobuf:"varint,5,opt,name=is_specified,json=isSpecified,proto3" json:"is_specified,omitempty"`
	UserInstance int32    `protobuf:"varint,6,opt,name=user_instance,json=userInstance,proto3" json:"user_instance,omitempty"`
}

func (m *CvlApiCreateLoopbackInstanceT) Reset()         { *m = CvlApiCreateLoopbackInstanceT{} }
func (m *CvlApiCreateLoopbackInstanceT) String() string { return proto.CompactTextString(m) }
func (*CvlApiCreateLoopbackInstanceT) ProtoMessage()    {}
func (*CvlApiCreateLoopbackInstanceT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{32}
}

func (m *CvlApiCreateLoopbackInstanceT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCreateLoopbackInstanceT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiCreateLoopbackInstanceT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCreateLoopbackInstanceT) GetMacAddress() [][]byte {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

func (m *CvlApiCreateLoopbackInstanceT) GetIsSpecified() int32 {
	if m != nil {
		return m.IsSpecified
	}
	return 0
}

func (m *CvlApiCreateLoopbackInstanceT) GetUserInstance() int32 {
	if m != nil {
		return m.UserInstance
	}
	return 0
}

type CvlApiCreateLoopbackInstanceReplyT struct {
	XVlMsgId  int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context   int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval    int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	SwIfIndex int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
}

func (m *CvlApiCreateLoopbackInstanceReplyT) Reset()         { *m = CvlApiCreateLoopbackInstanceReplyT{} }
func (m *CvlApiCreateLoopbackInstanceReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiCreateLoopbackInstanceReplyT) ProtoMessage()    {}
func (*CvlApiCreateLoopbackInstanceReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{33}
}

func (m *CvlApiCreateLoopbackInstanceReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCreateLoopbackInstanceReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCreateLoopbackInstanceReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiCreateLoopbackInstanceReplyT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

type CvlApiDeleteLoopbackT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex   int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
}

func (m *CvlApiDeleteLoopbackT) Reset()                    { *m = CvlApiDeleteLoopbackT{} }
func (m *CvlApiDeleteLoopbackT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiDeleteLoopbackT) ProtoMessage()               {}
func (*CvlApiDeleteLoopbackT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{34} }

func (m *CvlApiDeleteLoopbackT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiDeleteLoopbackT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiDeleteLoopbackT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiDeleteLoopbackT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

type CvlApiDeleteLoopbackReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiDeleteLoopbackReplyT) Reset()         { *m = CvlApiDeleteLoopbackReplyT{} }
func (m *CvlApiDeleteLoopbackReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiDeleteLoopbackReplyT) ProtoMessage()    {}
func (*CvlApiDeleteLoopbackReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{35}
}

func (m *CvlApiDeleteLoopbackReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiDeleteLoopbackReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiDeleteLoopbackReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiControlPingT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *CvlApiControlPingT) Reset()                    { *m = CvlApiControlPingT{} }
func (m *CvlApiControlPingT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiControlPingT) ProtoMessage()               {}
func (*CvlApiControlPingT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{36} }

func (m *CvlApiControlPingT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiControlPingT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiControlPingT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

type CvlApiControlPingReplyT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context     int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval      int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	ClientIndex int32 `protobuf:"varint,4,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	VpePid      int32 `protobuf:"varint,5,opt,name=vpe_pid,json=vpePid,proto3" json:"vpe_pid,omitempty"`
}

func (m *CvlApiControlPingReplyT) Reset()                    { *m = CvlApiControlPingReplyT{} }
func (m *CvlApiControlPingReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiControlPingReplyT) ProtoMessage()               {}
func (*CvlApiControlPingReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{37} }

func (m *CvlApiControlPingReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiControlPingReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiControlPingReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiControlPingReplyT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiControlPingReplyT) GetVpePid() int32 {
	if m != nil {
		return m.VpePid
	}
	return 0
}

type CvlApiCliRequestT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	CmdInShmem  int64 `protobuf:"varint,4,opt,name=cmd_in_shmem,json=cmdInShmem,proto3" json:"cmd_in_shmem,omitempty"`
}

func (m *CvlApiCliRequestT) Reset()                    { *m = CvlApiCliRequestT{} }
func (m *CvlApiCliRequestT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiCliRequestT) ProtoMessage()               {}
func (*CvlApiCliRequestT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{38} }

func (m *CvlApiCliRequestT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCliRequestT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiCliRequestT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCliRequestT) GetCmdInShmem() int64 {
	if m != nil {
		return m.CmdInShmem
	}
	return 0
}

type CvlApiCliInbandT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	Length      int32    `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Cmd         [][]byte `protobuf:"bytes,5,rep,name=cmd" json:"cmd,omitempty"`
}

func (m *CvlApiCliInbandT) Reset()                    { *m = CvlApiCliInbandT{} }
func (m *CvlApiCliInbandT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiCliInbandT) ProtoMessage()               {}
func (*CvlApiCliInbandT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{39} }

func (m *CvlApiCliInbandT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCliInbandT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiCliInbandT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCliInbandT) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *CvlApiCliInbandT) GetCmd() [][]byte {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type CvlApiCliReplyT struct {
	XVlMsgId     int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context      int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval       int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	ReplyInShmem int64 `protobuf:"varint,4,opt,name=reply_in_shmem,json=replyInShmem,proto3" json:"reply_in_shmem,omitempty"`
}

func (m *CvlApiCliReplyT) Reset()                    { *m = CvlApiCliReplyT{} }
func (m *CvlApiCliReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiCliReplyT) ProtoMessage()               {}
func (*CvlApiCliReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{40} }

func (m *CvlApiCliReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCliReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCliReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiCliReplyT) GetReplyInShmem() int64 {
	if m != nil {
		return m.ReplyInShmem
	}
	return 0
}

type CvlApiCliInbandReplyT struct {
	XVlMsgId int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32    `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32    `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	Length   int32    `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Reply    [][]byte `protobuf:"bytes,5,rep,name=reply" json:"reply,omitempty"`
}

func (m *CvlApiCliInbandReplyT) Reset()                    { *m = CvlApiCliInbandReplyT{} }
func (m *CvlApiCliInbandReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiCliInbandReplyT) ProtoMessage()               {}
func (*CvlApiCliInbandReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{41} }

func (m *CvlApiCliInbandReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCliInbandReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCliInbandReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiCliInbandReplyT) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *CvlApiCliInbandReplyT) GetReply() [][]byte {
	if m != nil {
		return m.Reply
	}
	return nil
}

type CvlApiSetArpNeighborLimitT struct {
	XVlMsgId         int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex      int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context          int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	IsIpv6           int32 `protobuf:"varint,4,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
	ArpNeighborLimit int32 `protobuf:"varint,5,opt,name=arp_neighbor_limit,json=arpNeighborLimit,proto3" json:"arp_neighbor_limit,omitempty"`
}

func (m *CvlApiSetArpNeighborLimitT) Reset()         { *m = CvlApiSetArpNeighborLimitT{} }
func (m *CvlApiSetArpNeighborLimitT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSetArpNeighborLimitT) ProtoMessage()    {}
func (*CvlApiSetArpNeighborLimitT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{42}
}

func (m *CvlApiSetArpNeighborLimitT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSetArpNeighborLimitT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiSetArpNeighborLimitT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSetArpNeighborLimitT) GetIsIpv6() int32 {
	if m != nil {
		return m.IsIpv6
	}
	return 0
}

func (m *CvlApiSetArpNeighborLimitT) GetArpNeighborLimit() int32 {
	if m != nil {
		return m.ArpNeighborLimit
	}
	return 0
}

type CvlApiSetArpNeighborLimitReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiSetArpNeighborLimitReplyT) Reset()         { *m = CvlApiSetArpNeighborLimitReplyT{} }
func (m *CvlApiSetArpNeighborLimitReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSetArpNeighborLimitReplyT) ProtoMessage()    {}
func (*CvlApiSetArpNeighborLimitReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{43}
}

func (m *CvlApiSetArpNeighborLimitReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSetArpNeighborLimitReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSetArpNeighborLimitReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiL2PatchAddDelT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	RxSwIfIndex int32 `protobuf:"varint,4,opt,name=rx_sw_if_index,json=rxSwIfIndex,proto3" json:"rx_sw_if_index,omitempty"`
	TxSwIfIndex int32 `protobuf:"varint,5,opt,name=tx_sw_if_index,json=txSwIfIndex,proto3" json:"tx_sw_if_index,omitempty"`
	IsAdd       int32 `protobuf:"varint,6,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
}

func (m *CvlApiL2PatchAddDelT) Reset()                    { *m = CvlApiL2PatchAddDelT{} }
func (m *CvlApiL2PatchAddDelT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiL2PatchAddDelT) ProtoMessage()               {}
func (*CvlApiL2PatchAddDelT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{44} }

func (m *CvlApiL2PatchAddDelT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiL2PatchAddDelT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiL2PatchAddDelT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiL2PatchAddDelT) GetRxSwIfIndex() int32 {
	if m != nil {
		return m.RxSwIfIndex
	}
	return 0
}

func (m *CvlApiL2PatchAddDelT) GetTxSwIfIndex() int32 {
	if m != nil {
		return m.TxSwIfIndex
	}
	return 0
}

func (m *CvlApiL2PatchAddDelT) GetIsAdd() int32 {
	if m != nil {
		return m.IsAdd
	}
	return 0
}

type CvlApiL2PatchAddDelReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiL2PatchAddDelReplyT) Reset()                    { *m = CvlApiL2PatchAddDelReplyT{} }
func (m *CvlApiL2PatchAddDelReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiL2PatchAddDelReplyT) ProtoMessage()               {}
func (*CvlApiL2PatchAddDelReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{45} }

func (m *CvlApiL2PatchAddDelReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiL2PatchAddDelReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiL2PatchAddDelReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiSwInterfaceSetVpathT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex   int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	Enable      int32 `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *CvlApiSwInterfaceSetVpathT) Reset()         { *m = CvlApiSwInterfaceSetVpathT{} }
func (m *CvlApiSwInterfaceSetVpathT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSwInterfaceSetVpathT) ProtoMessage()    {}
func (*CvlApiSwInterfaceSetVpathT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{46}
}

func (m *CvlApiSwInterfaceSetVpathT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetVpathT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetVpathT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSwInterfaceSetVpathT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetVpathT) GetEnable() int32 {
	if m != nil {
		return m.Enable
	}
	return 0
}

type CvlApiSwInterfaceSetVpathReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiSwInterfaceSetVpathReplyT) Reset()         { *m = CvlApiSwInterfaceSetVpathReplyT{} }
func (m *CvlApiSwInterfaceSetVpathReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSwInterfaceSetVpathReplyT) ProtoMessage()    {}
func (*CvlApiSwInterfaceSetVpathReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{47}
}

func (m *CvlApiSwInterfaceSetVpathReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetVpathReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSwInterfaceSetVpathReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiSwInterfaceSetL2XconnectT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	RxSwIfIndex int32 `protobuf:"varint,4,opt,name=rx_sw_if_index,json=rxSwIfIndex,proto3" json:"rx_sw_if_index,omitempty"`
	TxSwIfIndex int32 `protobuf:"varint,5,opt,name=tx_sw_if_index,json=txSwIfIndex,proto3" json:"tx_sw_if_index,omitempty"`
	Enable      int32 `protobuf:"varint,6,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *CvlApiSwInterfaceSetL2XconnectT) Reset()         { *m = CvlApiSwInterfaceSetL2XconnectT{} }
func (m *CvlApiSwInterfaceSetL2XconnectT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSwInterfaceSetL2XconnectT) ProtoMessage()    {}
func (*CvlApiSwInterfaceSetL2XconnectT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{48}
}

func (m *CvlApiSwInterfaceSetL2XconnectT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2XconnectT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2XconnectT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2XconnectT) GetRxSwIfIndex() int32 {
	if m != nil {
		return m.RxSwIfIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2XconnectT) GetTxSwIfIndex() int32 {
	if m != nil {
		return m.TxSwIfIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2XconnectT) GetEnable() int32 {
	if m != nil {
		return m.Enable
	}
	return 0
}

type CvlApiSwInterfaceSetL2XconnectReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiSwInterfaceSetL2XconnectReplyT) Reset()         { *m = CvlApiSwInterfaceSetL2XconnectReplyT{} }
func (m *CvlApiSwInterfaceSetL2XconnectReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSwInterfaceSetL2XconnectReplyT) ProtoMessage()    {}
func (*CvlApiSwInterfaceSetL2XconnectReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{49}
}

func (m *CvlApiSwInterfaceSetL2XconnectReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2XconnectReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2XconnectReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiSwInterfaceSetL2BridgeT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	RxSwIfIndex int32 `protobuf:"varint,4,opt,name=rx_sw_if_index,json=rxSwIfIndex,proto3" json:"rx_sw_if_index,omitempty"`
	BdId        int32 `protobuf:"varint,5,opt,name=bd_id,json=bdId,proto3" json:"bd_id,omitempty"`
	Shg         int32 `protobuf:"varint,6,opt,name=shg,proto3" json:"shg,omitempty"`
	Bvi         int32 `protobuf:"varint,7,opt,name=bvi,proto3" json:"bvi,omitempty"`
	Enable      int32 `protobuf:"varint,8,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *CvlApiSwInterfaceSetL2BridgeT) Reset()         { *m = CvlApiSwInterfaceSetL2BridgeT{} }
func (m *CvlApiSwInterfaceSetL2BridgeT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSwInterfaceSetL2BridgeT) ProtoMessage()    {}
func (*CvlApiSwInterfaceSetL2BridgeT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{50}
}

func (m *CvlApiSwInterfaceSetL2BridgeT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeT) GetRxSwIfIndex() int32 {
	if m != nil {
		return m.RxSwIfIndex
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeT) GetBdId() int32 {
	if m != nil {
		return m.BdId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeT) GetShg() int32 {
	if m != nil {
		return m.Shg
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeT) GetBvi() int32 {
	if m != nil {
		return m.Bvi
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeT) GetEnable() int32 {
	if m != nil {
		return m.Enable
	}
	return 0
}

type CvlApiSwInterfaceSetL2BridgeReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiSwInterfaceSetL2BridgeReplyT) Reset()         { *m = CvlApiSwInterfaceSetL2BridgeReplyT{} }
func (m *CvlApiSwInterfaceSetL2BridgeReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiSwInterfaceSetL2BridgeReplyT) ProtoMessage()    {}
func (*CvlApiSwInterfaceSetL2BridgeReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{51}
}

func (m *CvlApiSwInterfaceSetL2BridgeReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiSwInterfaceSetL2BridgeReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiBdIpMacAddDelT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	BdId        int32    `protobuf:"varint,4,opt,name=bd_id,json=bdId,proto3" json:"bd_id,omitempty"`
	IsAdd       int32    `protobuf:"varint,5,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	IsIpv6      int32    `protobuf:"varint,6,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
	IpAddress   [][]byte `protobuf:"bytes,7,rep,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
	MacAddress  [][]byte `protobuf:"bytes,8,rep,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *CvlApiBdIpMacAddDelT) Reset()                    { *m = CvlApiBdIpMacAddDelT{} }
func (m *CvlApiBdIpMacAddDelT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiBdIpMacAddDelT) ProtoMessage()               {}
func (*CvlApiBdIpMacAddDelT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{52} }

func (m *CvlApiBdIpMacAddDelT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiBdIpMacAddDelT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiBdIpMacAddDelT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiBdIpMacAddDelT) GetBdId() int32 {
	if m != nil {
		return m.BdId
	}
	return 0
}

func (m *CvlApiBdIpMacAddDelT) GetIsAdd() int32 {
	if m != nil {
		return m.IsAdd
	}
	return 0
}

func (m *CvlApiBdIpMacAddDelT) GetIsIpv6() int32 {
	if m != nil {
		return m.IsIpv6
	}
	return 0
}

func (m *CvlApiBdIpMacAddDelT) GetIpAddress() [][]byte {
	if m != nil {
		return m.IpAddress
	}
	return nil
}

func (m *CvlApiBdIpMacAddDelT) GetMacAddress() [][]byte {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

type CvlApiBdIpMacAddDelReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiBdIpMacAddDelReplyT) Reset()                    { *m = CvlApiBdIpMacAddDelReplyT{} }
func (m *CvlApiBdIpMacAddDelReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiBdIpMacAddDelReplyT) ProtoMessage()               {}
func (*CvlApiBdIpMacAddDelReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{53} }

func (m *CvlApiBdIpMacAddDelReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiBdIpMacAddDelReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiBdIpMacAddDelReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiClassifySetInterfaceIpTableT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	IsIpv6      int32 `protobuf:"varint,4,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
	SwIfIndex   int32 `protobuf:"varint,5,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	TableIndex  int32 `protobuf:"varint,6,opt,name=table_index,json=tableIndex,proto3" json:"table_index,omitempty"`
}

func (m *CvlApiClassifySetInterfaceIpTableT) Reset()         { *m = CvlApiClassifySetInterfaceIpTableT{} }
func (m *CvlApiClassifySetInterfaceIpTableT) String() string { return proto.CompactTextString(m) }
func (*CvlApiClassifySetInterfaceIpTableT) ProtoMessage()    {}
func (*CvlApiClassifySetInterfaceIpTableT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{54}
}

func (m *CvlApiClassifySetInterfaceIpTableT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceIpTableT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceIpTableT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceIpTableT) GetIsIpv6() int32 {
	if m != nil {
		return m.IsIpv6
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceIpTableT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceIpTableT) GetTableIndex() int32 {
	if m != nil {
		return m.TableIndex
	}
	return 0
}

type CvlApiClassifySetInterfaceIpTableReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiClassifySetInterfaceIpTableReplyT) Reset() {
	*m = CvlApiClassifySetInterfaceIpTableReplyT{}
}
func (m *CvlApiClassifySetInterfaceIpTableReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiClassifySetInterfaceIpTableReplyT) ProtoMessage()    {}
func (*CvlApiClassifySetInterfaceIpTableReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{55}
}

func (m *CvlApiClassifySetInterfaceIpTableReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceIpTableReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceIpTableReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiClassifySetInterfaceL2TablesT struct {
	XVlMsgId        int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex     int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context         int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex       int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	Ip4TableIndex   int32 `protobuf:"varint,5,opt,name=ip4_table_index,json=ip4TableIndex,proto3" json:"ip4_table_index,omitempty"`
	Ip6TableIndex   int32 `protobuf:"varint,6,opt,name=ip6_table_index,json=ip6TableIndex,proto3" json:"ip6_table_index,omitempty"`
	OtherTableIndex int32 `protobuf:"varint,7,opt,name=other_table_index,json=otherTableIndex,proto3" json:"other_table_index,omitempty"`
	IsInput         int32 `protobuf:"varint,8,opt,name=is_input,json=isInput,proto3" json:"is_input,omitempty"`
}

func (m *CvlApiClassifySetInterfaceL2TablesT) Reset()         { *m = CvlApiClassifySetInterfaceL2TablesT{} }
func (m *CvlApiClassifySetInterfaceL2TablesT) String() string { return proto.CompactTextString(m) }
func (*CvlApiClassifySetInterfaceL2TablesT) ProtoMessage()    {}
func (*CvlApiClassifySetInterfaceL2TablesT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{56}
}

func (m *CvlApiClassifySetInterfaceL2TablesT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesT) GetIp4TableIndex() int32 {
	if m != nil {
		return m.Ip4TableIndex
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesT) GetIp6TableIndex() int32 {
	if m != nil {
		return m.Ip6TableIndex
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesT) GetOtherTableIndex() int32 {
	if m != nil {
		return m.OtherTableIndex
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesT) GetIsInput() int32 {
	if m != nil {
		return m.IsInput
	}
	return 0
}

type CvlApiClassifySetInterfaceL2TablesReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiClassifySetInterfaceL2TablesReplyT) Reset() {
	*m = CvlApiClassifySetInterfaceL2TablesReplyT{}
}
func (m *CvlApiClassifySetInterfaceL2TablesReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiClassifySetInterfaceL2TablesReplyT) ProtoMessage()    {}
func (*CvlApiClassifySetInterfaceL2TablesReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{57}
}

func (m *CvlApiClassifySetInterfaceL2TablesReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiClassifySetInterfaceL2TablesReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiGetNodeIndexT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	NodeName    [][]byte `protobuf:"bytes,4,rep,name=node_name,json=nodeName" json:"node_name,omitempty"`
}

func (m *CvlApiGetNodeIndexT) Reset()                    { *m = CvlApiGetNodeIndexT{} }
func (m *CvlApiGetNodeIndexT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiGetNodeIndexT) ProtoMessage()               {}
func (*CvlApiGetNodeIndexT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{58} }

func (m *CvlApiGetNodeIndexT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiGetNodeIndexT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiGetNodeIndexT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiGetNodeIndexT) GetNodeName() [][]byte {
	if m != nil {
		return m.NodeName
	}
	return nil
}

type CvlApiGetNodeIndexReplyT struct {
	XVlMsgId  int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context   int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval    int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	NodeIndex int32 `protobuf:"varint,4,opt,name=node_index,json=nodeIndex,proto3" json:"node_index,omitempty"`
}

func (m *CvlApiGetNodeIndexReplyT) Reset()                    { *m = CvlApiGetNodeIndexReplyT{} }
func (m *CvlApiGetNodeIndexReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiGetNodeIndexReplyT) ProtoMessage()               {}
func (*CvlApiGetNodeIndexReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{59} }

func (m *CvlApiGetNodeIndexReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiGetNodeIndexReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiGetNodeIndexReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiGetNodeIndexReplyT) GetNodeIndex() int32 {
	if m != nil {
		return m.NodeIndex
	}
	return 0
}

type CvlApiAddNodeNextT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	NodeName    [][]byte `protobuf:"bytes,4,rep,name=node_name,json=nodeName" json:"node_name,omitempty"`
	NextName    [][]byte `protobuf:"bytes,5,rep,name=next_name,json=nextName" json:"next_name,omitempty"`
}

func (m *CvlApiAddNodeNextT) Reset()                    { *m = CvlApiAddNodeNextT{} }
func (m *CvlApiAddNodeNextT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiAddNodeNextT) ProtoMessage()               {}
func (*CvlApiAddNodeNextT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{60} }

func (m *CvlApiAddNodeNextT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiAddNodeNextT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiAddNodeNextT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiAddNodeNextT) GetNodeName() [][]byte {
	if m != nil {
		return m.NodeName
	}
	return nil
}

func (m *CvlApiAddNodeNextT) GetNextName() [][]byte {
	if m != nil {
		return m.NextName
	}
	return nil
}

type CvlApiAddNodeNextReplyT struct {
	XVlMsgId  int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context   int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval    int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	NextIndex int32 `protobuf:"varint,4,opt,name=next_index,json=nextIndex,proto3" json:"next_index,omitempty"`
}

func (m *CvlApiAddNodeNextReplyT) Reset()                    { *m = CvlApiAddNodeNextReplyT{} }
func (m *CvlApiAddNodeNextReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiAddNodeNextReplyT) ProtoMessage()               {}
func (*CvlApiAddNodeNextReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{61} }

func (m *CvlApiAddNodeNextReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiAddNodeNextReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiAddNodeNextReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiAddNodeNextReplyT) GetNextIndex() int32 {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

type CvlApiL2InterfaceEfpFilterT struct {
	XVlMsgId      int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex   int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context       int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex     int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	EnableDisable int32 `protobuf:"varint,5,opt,name=enable_disable,json=enableDisable,proto3" json:"enable_disable,omitempty"`
}

func (m *CvlApiL2InterfaceEfpFilterT) Reset()         { *m = CvlApiL2InterfaceEfpFilterT{} }
func (m *CvlApiL2InterfaceEfpFilterT) String() string { return proto.CompactTextString(m) }
func (*CvlApiL2InterfaceEfpFilterT) ProtoMessage()    {}
func (*CvlApiL2InterfaceEfpFilterT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{62}
}

func (m *CvlApiL2InterfaceEfpFilterT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiL2InterfaceEfpFilterT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiL2InterfaceEfpFilterT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiL2InterfaceEfpFilterT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiL2InterfaceEfpFilterT) GetEnableDisable() int32 {
	if m != nil {
		return m.EnableDisable
	}
	return 0
}

type CvlApiL2InterfaceEfpFilterReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiL2InterfaceEfpFilterReplyT) Reset()         { *m = CvlApiL2InterfaceEfpFilterReplyT{} }
func (m *CvlApiL2InterfaceEfpFilterReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiL2InterfaceEfpFilterReplyT) ProtoMessage()    {}
func (*CvlApiL2InterfaceEfpFilterReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{63}
}

func (m *CvlApiL2InterfaceEfpFilterReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiL2InterfaceEfpFilterReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiL2InterfaceEfpFilterReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiCreateSubifT struct {
	XVlMsgId       int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex    int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context        int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex      int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	SubId          int32 `protobuf:"varint,5,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	NoTags         int32 `protobuf:"varint,6,opt,name=no_tags,json=noTags,proto3" json:"no_tags,omitempty"`
	OneTag         int32 `protobuf:"varint,7,opt,name=one_tag,json=oneTag,proto3" json:"one_tag,omitempty"`
	TwoTags        int32 `protobuf:"varint,8,opt,name=two_tags,json=twoTags,proto3" json:"two_tags,omitempty"`
	Dot1Ad         int32 `protobuf:"varint,9,opt,name=dot1ad,proto3" json:"dot1ad,omitempty"`
	ExactMatch     int32 `protobuf:"varint,10,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
	DefaultSub     int32 `protobuf:"varint,11,opt,name=default_sub,json=defaultSub,proto3" json:"default_sub,omitempty"`
	OuterVlanIdAny int32 `protobuf:"varint,12,opt,name=outer_vlan_id_any,json=outerVlanIdAny,proto3" json:"outer_vlan_id_any,omitempty"`
	InnerVlanIdAny int32 `protobuf:"varint,13,opt,name=inner_vlan_id_any,json=innerVlanIdAny,proto3" json:"inner_vlan_id_any,omitempty"`
	OuterVlanId    int32 `protobuf:"varint,14,opt,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
	InnerVlanId    int32 `protobuf:"varint,15,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
}

func (m *CvlApiCreateSubifT) Reset()                    { *m = CvlApiCreateSubifT{} }
func (m *CvlApiCreateSubifT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiCreateSubifT) ProtoMessage()               {}
func (*CvlApiCreateSubifT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{64} }

func (m *CvlApiCreateSubifT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetSubId() int32 {
	if m != nil {
		return m.SubId
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetNoTags() int32 {
	if m != nil {
		return m.NoTags
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetOneTag() int32 {
	if m != nil {
		return m.OneTag
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetTwoTags() int32 {
	if m != nil {
		return m.TwoTags
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetDot1Ad() int32 {
	if m != nil {
		return m.Dot1Ad
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetExactMatch() int32 {
	if m != nil {
		return m.ExactMatch
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetDefaultSub() int32 {
	if m != nil {
		return m.DefaultSub
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetOuterVlanIdAny() int32 {
	if m != nil {
		return m.OuterVlanIdAny
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetInnerVlanIdAny() int32 {
	if m != nil {
		return m.InnerVlanIdAny
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetOuterVlanId() int32 {
	if m != nil {
		return m.OuterVlanId
	}
	return 0
}

func (m *CvlApiCreateSubifT) GetInnerVlanId() int32 {
	if m != nil {
		return m.InnerVlanId
	}
	return 0
}

type CvlApiCreateSubifReplyT struct {
	XVlMsgId  int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context   int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval    int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	SwIfIndex int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
}

func (m *CvlApiCreateSubifReplyT) Reset()                    { *m = CvlApiCreateSubifReplyT{} }
func (m *CvlApiCreateSubifReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiCreateSubifReplyT) ProtoMessage()               {}
func (*CvlApiCreateSubifReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{65} }

func (m *CvlApiCreateSubifReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiCreateSubifReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiCreateSubifReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiCreateSubifReplyT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

type CvlApiShowVersionT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *CvlApiShowVersionT) Reset()                    { *m = CvlApiShowVersionT{} }
func (m *CvlApiShowVersionT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiShowVersionT) ProtoMessage()               {}
func (*CvlApiShowVersionT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{66} }

func (m *CvlApiShowVersionT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiShowVersionT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiShowVersionT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

type CvlApiShowVersionReplyT struct {
	XVlMsgId       int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context        int32    `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval         int32    `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	Program        [][]byte `protobuf:"bytes,4,rep,name=program" json:"program,omitempty"`
	Version        [][]byte `protobuf:"bytes,5,rep,name=version" json:"version,omitempty"`
	BuildDate      [][]byte `protobuf:"bytes,6,rep,name=build_date,json=buildDate" json:"build_date,omitempty"`
	BuildDirectory [][]byte `protobuf:"bytes,7,rep,name=build_directory,json=buildDirectory" json:"build_directory,omitempty"`
}

func (m *CvlApiShowVersionReplyT) Reset()                    { *m = CvlApiShowVersionReplyT{} }
func (m *CvlApiShowVersionReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiShowVersionReplyT) ProtoMessage()               {}
func (*CvlApiShowVersionReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{67} }

func (m *CvlApiShowVersionReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiShowVersionReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiShowVersionReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiShowVersionReplyT) GetProgram() [][]byte {
	if m != nil {
		return m.Program
	}
	return nil
}

func (m *CvlApiShowVersionReplyT) GetVersion() [][]byte {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CvlApiShowVersionReplyT) GetBuildDate() [][]byte {
	if m != nil {
		return m.BuildDate
	}
	return nil
}

func (m *CvlApiShowVersionReplyT) GetBuildDirectory() [][]byte {
	if m != nil {
		return m.BuildDirectory
	}
	return nil
}

type CvlApiInterfaceNameRenumberT struct {
	XVlMsgId           int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex        int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context            int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex          int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	NewShowDevInstance int32 `protobuf:"varint,5,opt,name=new_show_dev_instance,json=newShowDevInstance,proto3" json:"new_show_dev_instance,omitempty"`
}

func (m *CvlApiInterfaceNameRenumberT) Reset()         { *m = CvlApiInterfaceNameRenumberT{} }
func (m *CvlApiInterfaceNameRenumberT) String() string { return proto.CompactTextString(m) }
func (*CvlApiInterfaceNameRenumberT) ProtoMessage()    {}
func (*CvlApiInterfaceNameRenumberT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{68}
}

func (m *CvlApiInterfaceNameRenumberT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiInterfaceNameRenumberT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiInterfaceNameRenumberT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiInterfaceNameRenumberT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiInterfaceNameRenumberT) GetNewShowDevInstance() int32 {
	if m != nil {
		return m.NewShowDevInstance
	}
	return 0
}

type CvlApiInterfaceNameRenumberReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiInterfaceNameRenumberReplyT) Reset()         { *m = CvlApiInterfaceNameRenumberReplyT{} }
func (m *CvlApiInterfaceNameRenumberReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiInterfaceNameRenumberReplyT) ProtoMessage()    {}
func (*CvlApiInterfaceNameRenumberReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{69}
}

func (m *CvlApiInterfaceNameRenumberReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiInterfaceNameRenumberReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiInterfaceNameRenumberReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiWantIp4ArpEventsT struct {
	XVlMsgId      int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex   int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context       int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	EnableDisable int32 `protobuf:"varint,4,opt,name=enable_disable,json=enableDisable,proto3" json:"enable_disable,omitempty"`
	Pid           int32 `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Address       int32 `protobuf:"varint,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *CvlApiWantIp4ArpEventsT) Reset()                    { *m = CvlApiWantIp4ArpEventsT{} }
func (m *CvlApiWantIp4ArpEventsT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiWantIp4ArpEventsT) ProtoMessage()               {}
func (*CvlApiWantIp4ArpEventsT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{70} }

func (m *CvlApiWantIp4ArpEventsT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiWantIp4ArpEventsT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiWantIp4ArpEventsT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiWantIp4ArpEventsT) GetEnableDisable() int32 {
	if m != nil {
		return m.EnableDisable
	}
	return 0
}

func (m *CvlApiWantIp4ArpEventsT) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CvlApiWantIp4ArpEventsT) GetAddress() int32 {
	if m != nil {
		return m.Address
	}
	return 0
}

type CvlApiWantIp4ArpEventsReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiWantIp4ArpEventsReplyT) Reset()         { *m = CvlApiWantIp4ArpEventsReplyT{} }
func (m *CvlApiWantIp4ArpEventsReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiWantIp4ArpEventsReplyT) ProtoMessage()    {}
func (*CvlApiWantIp4ArpEventsReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{71}
}

func (m *CvlApiWantIp4ArpEventsReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiWantIp4ArpEventsReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiWantIp4ArpEventsReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiIp4ArpEventT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	Address     int32    `protobuf:"varint,4,opt,name=address,proto3" json:"address,omitempty"`
	Pid         int32    `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	SwIfIndex   int32    `protobuf:"varint,6,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	NewMac      [][]byte `protobuf:"bytes,7,rep,name=new_mac,json=newMac" json:"new_mac,omitempty"`
	MacIp       int32    `protobuf:"varint,8,opt,name=mac_ip,json=macIp,proto3" json:"mac_ip,omitempty"`
}

func (m *CvlApiIp4ArpEventT) Reset()                    { *m = CvlApiIp4ArpEventT{} }
func (m *CvlApiIp4ArpEventT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIp4ArpEventT) ProtoMessage()               {}
func (*CvlApiIp4ArpEventT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{72} }

func (m *CvlApiIp4ArpEventT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIp4ArpEventT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiIp4ArpEventT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIp4ArpEventT) GetAddress() int32 {
	if m != nil {
		return m.Address
	}
	return 0
}

func (m *CvlApiIp4ArpEventT) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CvlApiIp4ArpEventT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiIp4ArpEventT) GetNewMac() [][]byte {
	if m != nil {
		return m.NewMac
	}
	return nil
}

func (m *CvlApiIp4ArpEventT) GetMacIp() int32 {
	if m != nil {
		return m.MacIp
	}
	return 0
}

type CvlApiWantIp6NdEventsT struct {
	XVlMsgId      int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex   int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context       int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	EnableDisable int32    `protobuf:"varint,4,opt,name=enable_disable,json=enableDisable,proto3" json:"enable_disable,omitempty"`
	Pid           int32    `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Address       [][]byte `protobuf:"bytes,6,rep,name=address" json:"address,omitempty"`
}

func (m *CvlApiWantIp6NdEventsT) Reset()                    { *m = CvlApiWantIp6NdEventsT{} }
func (m *CvlApiWantIp6NdEventsT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiWantIp6NdEventsT) ProtoMessage()               {}
func (*CvlApiWantIp6NdEventsT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{73} }

func (m *CvlApiWantIp6NdEventsT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiWantIp6NdEventsT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiWantIp6NdEventsT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiWantIp6NdEventsT) GetEnableDisable() int32 {
	if m != nil {
		return m.EnableDisable
	}
	return 0
}

func (m *CvlApiWantIp6NdEventsT) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CvlApiWantIp6NdEventsT) GetAddress() [][]byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type CvlApiWantIp6NdEventsReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiWantIp6NdEventsReplyT) Reset()         { *m = CvlApiWantIp6NdEventsReplyT{} }
func (m *CvlApiWantIp6NdEventsReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiWantIp6NdEventsReplyT) ProtoMessage()    {}
func (*CvlApiWantIp6NdEventsReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{74}
}

func (m *CvlApiWantIp6NdEventsReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiWantIp6NdEventsReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiWantIp6NdEventsReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiIp6NdEventT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	Pid         int32    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	SwIfIndex   int32    `protobuf:"varint,5,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	Address     [][]byte `protobuf:"bytes,6,rep,name=address" json:"address,omitempty"`
	NewMac      [][]byte `protobuf:"bytes,7,rep,name=new_mac,json=newMac" json:"new_mac,omitempty"`
	MacIp       int32    `protobuf:"varint,8,opt,name=mac_ip,json=macIp,proto3" json:"mac_ip,omitempty"`
}

func (m *CvlApiIp6NdEventT) Reset()                    { *m = CvlApiIp6NdEventT{} }
func (m *CvlApiIp6NdEventT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIp6NdEventT) ProtoMessage()               {}
func (*CvlApiIp6NdEventT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{75} }

func (m *CvlApiIp6NdEventT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIp6NdEventT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiIp6NdEventT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIp6NdEventT) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CvlApiIp6NdEventT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiIp6NdEventT) GetAddress() [][]byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CvlApiIp6NdEventT) GetNewMac() [][]byte {
	if m != nil {
		return m.NewMac
	}
	return nil
}

func (m *CvlApiIp6NdEventT) GetMacIp() int32 {
	if m != nil {
		return m.MacIp
	}
	return 0
}

type CvlApiInputAclSetInterfaceT struct {
	XVlMsgId      int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex   int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context       int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex     int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	Ip4TableIndex int32 `protobuf:"varint,5,opt,name=ip4_table_index,json=ip4TableIndex,proto3" json:"ip4_table_index,omitempty"`
	Ip6TableIndex int32 `protobuf:"varint,6,opt,name=ip6_table_index,json=ip6TableIndex,proto3" json:"ip6_table_index,omitempty"`
	L2TableIndex  int32 `protobuf:"varint,7,opt,name=l2_table_index,json=l2TableIndex,proto3" json:"l2_table_index,omitempty"`
	IsAdd         int32 `protobuf:"varint,8,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
}

func (m *CvlApiInputAclSetInterfaceT) Reset()         { *m = CvlApiInputAclSetInterfaceT{} }
func (m *CvlApiInputAclSetInterfaceT) String() string { return proto.CompactTextString(m) }
func (*CvlApiInputAclSetInterfaceT) ProtoMessage()    {}
func (*CvlApiInputAclSetInterfaceT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{76}
}

func (m *CvlApiInputAclSetInterfaceT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceT) GetIp4TableIndex() int32 {
	if m != nil {
		return m.Ip4TableIndex
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceT) GetIp6TableIndex() int32 {
	if m != nil {
		return m.Ip6TableIndex
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceT) GetL2TableIndex() int32 {
	if m != nil {
		return m.L2TableIndex
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceT) GetIsAdd() int32 {
	if m != nil {
		return m.IsAdd
	}
	return 0
}

type CvlApiInputAclSetInterfaceReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiInputAclSetInterfaceReplyT) Reset()         { *m = CvlApiInputAclSetInterfaceReplyT{} }
func (m *CvlApiInputAclSetInterfaceReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiInputAclSetInterfaceReplyT) ProtoMessage()    {}
func (*CvlApiInputAclSetInterfaceReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{77}
}

func (m *CvlApiInputAclSetInterfaceReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiInputAclSetInterfaceReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiGetNodeGraphT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *CvlApiGetNodeGraphT) Reset()                    { *m = CvlApiGetNodeGraphT{} }
func (m *CvlApiGetNodeGraphT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiGetNodeGraphT) ProtoMessage()               {}
func (*CvlApiGetNodeGraphT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{78} }

func (m *CvlApiGetNodeGraphT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiGetNodeGraphT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiGetNodeGraphT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

type CvlApiGetNodeGraphReplyT struct {
	XVlMsgId     int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context      int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval       int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	ReplyInShmem int64 `protobuf:"varint,4,opt,name=reply_in_shmem,json=replyInShmem,proto3" json:"reply_in_shmem,omitempty"`
}

func (m *CvlApiGetNodeGraphReplyT) Reset()                    { *m = CvlApiGetNodeGraphReplyT{} }
func (m *CvlApiGetNodeGraphReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiGetNodeGraphReplyT) ProtoMessage()               {}
func (*CvlApiGetNodeGraphReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{79} }

func (m *CvlApiGetNodeGraphReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiGetNodeGraphReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiGetNodeGraphReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiGetNodeGraphReplyT) GetReplyInShmem() int64 {
	if m != nil {
		return m.ReplyInShmem
	}
	return 0
}

type CvlApiIoamEnableT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	Id          int32 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Seqno       int32 `protobuf:"varint,5,opt,name=seqno,proto3" json:"seqno,omitempty"`
	Analyse     int32 `protobuf:"varint,6,opt,name=analyse,proto3" json:"analyse,omitempty"`
	PotEnable   int32 `protobuf:"varint,7,opt,name=pot_enable,json=potEnable,proto3" json:"pot_enable,omitempty"`
	TraceEnable int32 `protobuf:"varint,8,opt,name=trace_enable,json=traceEnable,proto3" json:"trace_enable,omitempty"`
	NodeId      int32 `protobuf:"varint,9,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *CvlApiIoamEnableT) Reset()                    { *m = CvlApiIoamEnableT{} }
func (m *CvlApiIoamEnableT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIoamEnableT) ProtoMessage()               {}
func (*CvlApiIoamEnableT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{80} }

func (m *CvlApiIoamEnableT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIoamEnableT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiIoamEnableT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIoamEnableT) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CvlApiIoamEnableT) GetSeqno() int32 {
	if m != nil {
		return m.Seqno
	}
	return 0
}

func (m *CvlApiIoamEnableT) GetAnalyse() int32 {
	if m != nil {
		return m.Analyse
	}
	return 0
}

func (m *CvlApiIoamEnableT) GetPotEnable() int32 {
	if m != nil {
		return m.PotEnable
	}
	return 0
}

func (m *CvlApiIoamEnableT) GetTraceEnable() int32 {
	if m != nil {
		return m.TraceEnable
	}
	return 0
}

func (m *CvlApiIoamEnableT) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

type CvlApiIoamEnableReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiIoamEnableReplyT) Reset()                    { *m = CvlApiIoamEnableReplyT{} }
func (m *CvlApiIoamEnableReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIoamEnableReplyT) ProtoMessage()               {}
func (*CvlApiIoamEnableReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{81} }

func (m *CvlApiIoamEnableReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIoamEnableReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIoamEnableReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiIoamDisableT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	Id          int32 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CvlApiIoamDisableT) Reset()                    { *m = CvlApiIoamDisableT{} }
func (m *CvlApiIoamDisableT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIoamDisableT) ProtoMessage()               {}
func (*CvlApiIoamDisableT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{82} }

func (m *CvlApiIoamDisableT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIoamDisableT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiIoamDisableT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIoamDisableT) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CvlApiIoamDisableReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiIoamDisableReplyT) Reset()                    { *m = CvlApiIoamDisableReplyT{} }
func (m *CvlApiIoamDisableReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiIoamDisableReplyT) ProtoMessage()               {}
func (*CvlApiIoamDisableReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{83} }

func (m *CvlApiIoamDisableReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIoamDisableReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIoamDisableReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiGetNextIndexT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	NodeName    [][]byte `protobuf:"bytes,4,rep,name=node_name,json=nodeName" json:"node_name,omitempty"`
	NextName    [][]byte `protobuf:"bytes,5,rep,name=next_name,json=nextName" json:"next_name,omitempty"`
}

func (m *CvlApiGetNextIndexT) Reset()                    { *m = CvlApiGetNextIndexT{} }
func (m *CvlApiGetNextIndexT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiGetNextIndexT) ProtoMessage()               {}
func (*CvlApiGetNextIndexT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{84} }

func (m *CvlApiGetNextIndexT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiGetNextIndexT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiGetNextIndexT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiGetNextIndexT) GetNodeName() [][]byte {
	if m != nil {
		return m.NodeName
	}
	return nil
}

func (m *CvlApiGetNextIndexT) GetNextName() [][]byte {
	if m != nil {
		return m.NextName
	}
	return nil
}

type CvlApiGetNextIndexReplyT struct {
	XVlMsgId  int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context   int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval    int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	NextIndex int32 `protobuf:"varint,4,opt,name=next_index,json=nextIndex,proto3" json:"next_index,omitempty"`
}

func (m *CvlApiGetNextIndexReplyT) Reset()                    { *m = CvlApiGetNextIndexReplyT{} }
func (m *CvlApiGetNextIndexReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiGetNextIndexReplyT) ProtoMessage()               {}
func (*CvlApiGetNextIndexReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{85} }

func (m *CvlApiGetNextIndexReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiGetNextIndexReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiGetNextIndexReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiGetNextIndexReplyT) GetNextIndex() int32 {
	if m != nil {
		return m.NextIndex
	}
	return 0
}

type CvlApiPgCreateInterfaceT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	InterfaceId int32 `protobuf:"varint,4,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
}

func (m *CvlApiPgCreateInterfaceT) Reset()                    { *m = CvlApiPgCreateInterfaceT{} }
func (m *CvlApiPgCreateInterfaceT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiPgCreateInterfaceT) ProtoMessage()               {}
func (*CvlApiPgCreateInterfaceT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{86} }

func (m *CvlApiPgCreateInterfaceT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiPgCreateInterfaceT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiPgCreateInterfaceT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiPgCreateInterfaceT) GetInterfaceId() int32 {
	if m != nil {
		return m.InterfaceId
	}
	return 0
}

type CvlApiPgCreateInterfaceReplyT struct {
	XVlMsgId  int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context   int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval    int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
	SwIfIndex int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
}

func (m *CvlApiPgCreateInterfaceReplyT) Reset()         { *m = CvlApiPgCreateInterfaceReplyT{} }
func (m *CvlApiPgCreateInterfaceReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiPgCreateInterfaceReplyT) ProtoMessage()    {}
func (*CvlApiPgCreateInterfaceReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{87}
}

func (m *CvlApiPgCreateInterfaceReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiPgCreateInterfaceReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiPgCreateInterfaceReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func (m *CvlApiPgCreateInterfaceReplyT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

type CvlApiPgCaptureT struct {
	XVlMsgId       int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex    int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context        int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	InterfaceId    int32    `protobuf:"varint,4,opt,name=interface_id,json=interfaceId,proto3" json:"interface_id,omitempty"`
	IsEnabled      int32    `protobuf:"varint,5,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Count          int32    `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`
	PcapNameLength int32    `protobuf:"varint,7,opt,name=pcap_name_length,json=pcapNameLength,proto3" json:"pcap_name_length,omitempty"`
	PcapFileName   [][]byte `protobuf:"bytes,8,rep,name=pcap_file_name,json=pcapFileName" json:"pcap_file_name,omitempty"`
}

func (m *CvlApiPgCaptureT) Reset()                    { *m = CvlApiPgCaptureT{} }
func (m *CvlApiPgCaptureT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiPgCaptureT) ProtoMessage()               {}
func (*CvlApiPgCaptureT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{88} }

func (m *CvlApiPgCaptureT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiPgCaptureT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiPgCaptureT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiPgCaptureT) GetInterfaceId() int32 {
	if m != nil {
		return m.InterfaceId
	}
	return 0
}

func (m *CvlApiPgCaptureT) GetIsEnabled() int32 {
	if m != nil {
		return m.IsEnabled
	}
	return 0
}

func (m *CvlApiPgCaptureT) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CvlApiPgCaptureT) GetPcapNameLength() int32 {
	if m != nil {
		return m.PcapNameLength
	}
	return 0
}

func (m *CvlApiPgCaptureT) GetPcapFileName() [][]byte {
	if m != nil {
		return m.PcapFileName
	}
	return nil
}

type CvlApiPgCaptureReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiPgCaptureReplyT) Reset()                    { *m = CvlApiPgCaptureReplyT{} }
func (m *CvlApiPgCaptureReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiPgCaptureReplyT) ProtoMessage()               {}
func (*CvlApiPgCaptureReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{89} }

func (m *CvlApiPgCaptureReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiPgCaptureReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiPgCaptureReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiPgEnableDisableT struct {
	XVlMsgId         int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex      int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context          int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	IsEnabled        int32    `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	StreamNameLength int32    `protobuf:"varint,5,opt,name=stream_name_length,json=streamNameLength,proto3" json:"stream_name_length,omitempty"`
	StreamName       [][]byte `protobuf:"bytes,6,rep,name=stream_name,json=streamName" json:"stream_name,omitempty"`
}

func (m *CvlApiPgEnableDisableT) Reset()                    { *m = CvlApiPgEnableDisableT{} }
func (m *CvlApiPgEnableDisableT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiPgEnableDisableT) ProtoMessage()               {}
func (*CvlApiPgEnableDisableT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{90} }

func (m *CvlApiPgEnableDisableT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiPgEnableDisableT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiPgEnableDisableT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiPgEnableDisableT) GetIsEnabled() int32 {
	if m != nil {
		return m.IsEnabled
	}
	return 0
}

func (m *CvlApiPgEnableDisableT) GetStreamNameLength() int32 {
	if m != nil {
		return m.StreamNameLength
	}
	return 0
}

func (m *CvlApiPgEnableDisableT) GetStreamName() [][]byte {
	if m != nil {
		return m.StreamName
	}
	return nil
}

type CvlApiPgEnableDisableReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiPgEnableDisableReplyT) Reset()         { *m = CvlApiPgEnableDisableReplyT{} }
func (m *CvlApiPgEnableDisableReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiPgEnableDisableReplyT) ProtoMessage()    {}
func (*CvlApiPgEnableDisableReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{91}
}

func (m *CvlApiPgEnableDisableReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiPgEnableDisableReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiPgEnableDisableReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiIpSourceAndPortRangeCheckAddDelT struct {
	XVlMsgId       int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex    int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context        int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	IsIpv6         int32    `protobuf:"varint,4,opt,name=is_ipv6,json=isIpv6,proto3" json:"is_ipv6,omitempty"`
	IsAdd          int32    `protobuf:"varint,5,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	MaskLength     int32    `protobuf:"varint,6,opt,name=mask_length,json=maskLength,proto3" json:"mask_length,omitempty"`
	Address        [][]byte `protobuf:"bytes,7,rep,name=address" json:"address,omitempty"`
	NumberOfRanges int32    `protobuf:"varint,8,opt,name=number_of_ranges,json=numberOfRanges,proto3" json:"number_of_ranges,omitempty"`
	LowPorts       []int32  `protobuf:"varint,9,rep,packed,name=low_ports,json=lowPorts" json:"low_ports,omitempty"`
	HighPorts      []int32  `protobuf:"varint,10,rep,packed,name=high_ports,json=highPorts" json:"high_ports,omitempty"`
	VrfId          int32    `protobuf:"varint,11,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) Reset() {
	*m = CvlApiIpSourceAndPortRangeCheckAddDelT{}
}
func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) String() string { return proto.CompactTextString(m) }
func (*CvlApiIpSourceAndPortRangeCheckAddDelT) ProtoMessage()    {}
func (*CvlApiIpSourceAndPortRangeCheckAddDelT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{92}
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetIsIpv6() int32 {
	if m != nil {
		return m.IsIpv6
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetIsAdd() int32 {
	if m != nil {
		return m.IsAdd
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetMaskLength() int32 {
	if m != nil {
		return m.MaskLength
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetAddress() [][]byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetNumberOfRanges() int32 {
	if m != nil {
		return m.NumberOfRanges
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetLowPorts() []int32 {
	if m != nil {
		return m.LowPorts
	}
	return nil
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetHighPorts() []int32 {
	if m != nil {
		return m.HighPorts
	}
	return nil
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) GetVrfId() int32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

type CvlApiIpSourceAndPortRangeCheckAddDelReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) Reset() {
	*m = CvlApiIpSourceAndPortRangeCheckAddDelReplyT{}
}
func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) String() string {
	return proto.CompactTextString(m)
}
func (*CvlApiIpSourceAndPortRangeCheckAddDelReplyT) ProtoMessage() {}
func (*CvlApiIpSourceAndPortRangeCheckAddDelReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{93}
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	IsAdd       int32 `protobuf:"varint,4,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	SwIfIndex   int32 `protobuf:"varint,5,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	TcpInVrfId  int32 `protobuf:"varint,6,opt,name=tcp_in_vrf_id,json=tcpInVrfId,proto3" json:"tcp_in_vrf_id,omitempty"`
	TcpOutVrfId int32 `protobuf:"varint,7,opt,name=tcp_out_vrf_id,json=tcpOutVrfId,proto3" json:"tcp_out_vrf_id,omitempty"`
	UdpInVrfId  int32 `protobuf:"varint,8,opt,name=udp_in_vrf_id,json=udpInVrfId,proto3" json:"udp_in_vrf_id,omitempty"`
	UdpOutVrfId int32 `protobuf:"varint,9,opt,name=udp_out_vrf_id,json=udpOutVrfId,proto3" json:"udp_out_vrf_id,omitempty"`
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) Reset() {
	*m = CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT{}
}
func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) String() string {
	return proto.CompactTextString(m)
}
func (*CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) ProtoMessage() {}
func (*CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{94}
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetIsAdd() int32 {
	if m != nil {
		return m.IsAdd
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetTcpInVrfId() int32 {
	if m != nil {
		return m.TcpInVrfId
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetTcpOutVrfId() int32 {
	if m != nil {
		return m.TcpOutVrfId
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetUdpInVrfId() int32 {
	if m != nil {
		return m.UdpInVrfId
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) GetUdpOutVrfId() int32 {
	if m != nil {
		return m.UdpOutVrfId
	}
	return 0
}

type CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) Reset() {
	*m = CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT{}
}
func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) String() string {
	return proto.CompactTextString(m)
}
func (*CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) ProtoMessage() {}
func (*CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{95}
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiDeleteSubifT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex   int32 `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
}

func (m *CvlApiDeleteSubifT) Reset()                    { *m = CvlApiDeleteSubifT{} }
func (m *CvlApiDeleteSubifT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiDeleteSubifT) ProtoMessage()               {}
func (*CvlApiDeleteSubifT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{96} }

func (m *CvlApiDeleteSubifT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiDeleteSubifT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiDeleteSubifT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiDeleteSubifT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

type CvlApiDeleteSubifReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiDeleteSubifReplyT) Reset()                    { *m = CvlApiDeleteSubifReplyT{} }
func (m *CvlApiDeleteSubifReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiDeleteSubifReplyT) ProtoMessage()               {}
func (*CvlApiDeleteSubifReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{97} }

func (m *CvlApiDeleteSubifReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiDeleteSubifReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiDeleteSubifReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiPuntT struct {
	XVlMsgId    int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32 `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32 `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	IsAdd       int32 `protobuf:"varint,4,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	Ipv         int32 `protobuf:"varint,5,opt,name=ipv,proto3" json:"ipv,omitempty"`
	L4Protocol  int32 `protobuf:"varint,6,opt,name=l4_protocol,json=l4Protocol,proto3" json:"l4_protocol,omitempty"`
	L4Port      int32 `protobuf:"varint,7,opt,name=l4_port,json=l4Port,proto3" json:"l4_port,omitempty"`
}

func (m *CvlApiPuntT) Reset()                    { *m = CvlApiPuntT{} }
func (m *CvlApiPuntT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiPuntT) ProtoMessage()               {}
func (*CvlApiPuntT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{98} }

func (m *CvlApiPuntT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiPuntT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiPuntT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiPuntT) GetIsAdd() int32 {
	if m != nil {
		return m.IsAdd
	}
	return 0
}

func (m *CvlApiPuntT) GetIpv() int32 {
	if m != nil {
		return m.Ipv
	}
	return 0
}

func (m *CvlApiPuntT) GetL4Protocol() int32 {
	if m != nil {
		return m.L4Protocol
	}
	return 0
}

func (m *CvlApiPuntT) GetL4Port() int32 {
	if m != nil {
		return m.L4Port
	}
	return 0
}

type CvlApiPuntReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiPuntReplyT) Reset()                    { *m = CvlApiPuntReplyT{} }
func (m *CvlApiPuntReplyT) String() string            { return proto.CompactTextString(m) }
func (*CvlApiPuntReplyT) ProtoMessage()               {}
func (*CvlApiPuntReplyT) Descriptor() ([]byte, []int) { return fileDescriptorVpeApi, []int{99} }

func (m *CvlApiPuntReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiPuntReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiPuntReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

type CvlApiFeatureEnableDisableT struct {
	XVlMsgId    int32    `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	ClientIndex int32    `protobuf:"varint,2,opt,name=client_index,json=clientIndex,proto3" json:"client_index,omitempty"`
	Context     int32    `protobuf:"varint,3,opt,name=context,proto3" json:"context,omitempty"`
	SwIfIndex   int32    `protobuf:"varint,4,opt,name=sw_if_index,json=swIfIndex,proto3" json:"sw_if_index,omitempty"`
	Enable      int32    `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
	ArcName     [][]byte `protobuf:"bytes,6,rep,name=arc_name,json=arcName" json:"arc_name,omitempty"`
	FeatureName [][]byte `protobuf:"bytes,7,rep,name=feature_name,json=featureName" json:"feature_name,omitempty"`
}

func (m *CvlApiFeatureEnableDisableT) Reset()         { *m = CvlApiFeatureEnableDisableT{} }
func (m *CvlApiFeatureEnableDisableT) String() string { return proto.CompactTextString(m) }
func (*CvlApiFeatureEnableDisableT) ProtoMessage()    {}
func (*CvlApiFeatureEnableDisableT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{100}
}

func (m *CvlApiFeatureEnableDisableT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiFeatureEnableDisableT) GetClientIndex() int32 {
	if m != nil {
		return m.ClientIndex
	}
	return 0
}

func (m *CvlApiFeatureEnableDisableT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiFeatureEnableDisableT) GetSwIfIndex() int32 {
	if m != nil {
		return m.SwIfIndex
	}
	return 0
}

func (m *CvlApiFeatureEnableDisableT) GetEnable() int32 {
	if m != nil {
		return m.Enable
	}
	return 0
}

func (m *CvlApiFeatureEnableDisableT) GetArcName() [][]byte {
	if m != nil {
		return m.ArcName
	}
	return nil
}

func (m *CvlApiFeatureEnableDisableT) GetFeatureName() [][]byte {
	if m != nil {
		return m.FeatureName
	}
	return nil
}

type CvlApiFeatureEnableDisableReplyT struct {
	XVlMsgId int32 `protobuf:"varint,1,opt,name=_vl_msg_id,json=vlMsgId,proto3" json:"_vl_msg_id,omitempty"`
	Context  int32 `protobuf:"varint,2,opt,name=context,proto3" json:"context,omitempty"`
	Retval   int32 `protobuf:"zigzag32,3,opt,name=retval,proto3" json:"retval,omitempty"`
}

func (m *CvlApiFeatureEnableDisableReplyT) Reset()         { *m = CvlApiFeatureEnableDisableReplyT{} }
func (m *CvlApiFeatureEnableDisableReplyT) String() string { return proto.CompactTextString(m) }
func (*CvlApiFeatureEnableDisableReplyT) ProtoMessage()    {}
func (*CvlApiFeatureEnableDisableReplyT) Descriptor() ([]byte, []int) {
	return fileDescriptorVpeApi, []int{101}
}

func (m *CvlApiFeatureEnableDisableReplyT) GetXVlMsgId() int32 {
	if m != nil {
		return m.XVlMsgId
	}
	return 0
}

func (m *CvlApiFeatureEnableDisableReplyT) GetContext() int32 {
	if m != nil {
		return m.Context
	}
	return 0
}

func (m *CvlApiFeatureEnableDisableReplyT) GetRetval() int32 {
	if m != nil {
		return m.Retval
	}
	return 0
}

func init() {
	proto.RegisterType((*CvlApiCreateVlanSubifT)(nil), "fdio.cvl_api_create_vlan_subif_t")
	proto.RegisterType((*CvlApiCreateVlanSubifReplyT)(nil), "fdio.cvl_api_create_vlan_subif_reply_t")
	proto.RegisterType((*CvlApiSwInterfaceSetMplsEnableT)(nil), "fdio.cvl_api_sw_interface_set_mpls_enable_t")
	proto.RegisterType((*CvlApiSwInterfaceSetMplsEnableReplyT)(nil), "fdio.cvl_api_sw_interface_set_mpls_enable_reply_t")
	proto.RegisterType((*CvlApiProxyArpAddDelT)(nil), "fdio.cvl_api_proxy_arp_add_del_t")
	proto.RegisterType((*CvlApiProxyArpAddDelReplyT)(nil), "fdio.cvl_api_proxy_arp_add_del_reply_t")
	proto.RegisterType((*CvlApiProxyArpIntfcEnableDisableT)(nil), "fdio.cvl_api_proxy_arp_intfc_enable_disable_t")
	proto.RegisterType((*CvlApiProxyArpIntfcEnableDisableReplyT)(nil), "fdio.cvl_api_proxy_arp_intfc_enable_disable_reply_t")
	proto.RegisterType((*CvlApiResetVrfT)(nil), "fdio.cvl_api_reset_vrf_t")
	proto.RegisterType((*CvlApiResetVrfReplyT)(nil), "fdio.cvl_api_reset_vrf_reply_t")
	proto.RegisterType((*CvlApiIsAddressReachableT)(nil), "fdio.cvl_api_is_address_reachable_t")
	proto.RegisterType((*CvlApiWantStatsT)(nil), "fdio.cvl_api_want_stats_t")
	proto.RegisterType((*CvlApiWantStatsReplyT)(nil), "fdio.cvl_api_want_stats_reply_t")
	proto.RegisterType((*CvlApiIp4FibCounterT)(nil), "fdio.cvl_api_ip4_fib_counter_t")
	proto.RegisterType((*CvlApiVnetIp4FibCountersT)(nil), "fdio.cvl_api_vnet_ip4_fib_counters_t")
	proto.RegisterType((*CvlApiIp4NbrCounterT)(nil), "fdio.cvl_api_ip4_nbr_counter_t")
	proto.RegisterType((*CvlApiVnetIp4NbrCountersT)(nil), "fdio.cvl_api_vnet_ip4_nbr_counters_t")
	proto.RegisterType((*CvlApiIp6FibCounterT)(nil), "fdio.cvl_api_ip6_fib_counter_t")
	proto.RegisterType((*CvlApiVnetIp6FibCountersT)(nil), "fdio.cvl_api_vnet_ip6_fib_counters_t")
	proto.RegisterType((*CvlApiIp6NbrCounterT)(nil), "fdio.cvl_api_ip6_nbr_counter_t")
	proto.RegisterType((*CvlApiVnetIp6NbrCountersT)(nil), "fdio.cvl_api_vnet_ip6_nbr_counters_t")
	proto.RegisterType((*CvlApiVnetGetSummaryStatsT)(nil), "fdio.cvl_api_vnet_get_summary_stats_t")
	proto.RegisterType((*CvlApiVnetSummaryStatsReplyT)(nil), "fdio.cvl_api_vnet_summary_stats_reply_t")
	proto.RegisterType((*CvlApiOamEventT)(nil), "fdio.cvl_api_oam_event_t")
	proto.RegisterType((*CvlApiWantOamEventsT)(nil), "fdio.cvl_api_want_oam_events_t")
	proto.RegisterType((*CvlApiWantOamEventsReplyT)(nil), "fdio.cvl_api_want_oam_events_reply_t")
	proto.RegisterType((*CvlApiOamAddDelT)(nil), "fdio.cvl_api_oam_add_del_t")
	proto.RegisterType((*CvlApiOamAddDelReplyT)(nil), "fdio.cvl_api_oam_add_del_reply_t")
	proto.RegisterType((*CvlApiResetFibT)(nil), "fdio.cvl_api_reset_fib_t")
	proto.RegisterType((*CvlApiResetFibReplyT)(nil), "fdio.cvl_api_reset_fib_reply_t")
	proto.RegisterType((*CvlApiCreateLoopbackT)(nil), "fdio.cvl_api_create_loopback_t")
	proto.RegisterType((*CvlApiCreateLoopbackReplyT)(nil), "fdio.cvl_api_create_loopback_reply_t")
	proto.RegisterType((*CvlApiCreateLoopbackInstanceT)(nil), "fdio.cvl_api_create_loopback_instance_t")
	proto.RegisterType((*CvlApiCreateLoopbackInstanceReplyT)(nil), "fdio.cvl_api_create_loopback_instance_reply_t")
	proto.RegisterType((*CvlApiDeleteLoopbackT)(nil), "fdio.cvl_api_delete_loopback_t")
	proto.RegisterType((*CvlApiDeleteLoopbackReplyT)(nil), "fdio.cvl_api_delete_loopback_reply_t")
	proto.RegisterType((*CvlApiControlPingT)(nil), "fdio.cvl_api_control_ping_t")
	proto.RegisterType((*CvlApiControlPingReplyT)(nil), "fdio.cvl_api_control_ping_reply_t")
	proto.RegisterType((*CvlApiCliRequestT)(nil), "fdio.cvl_api_cli_request_t")
	proto.RegisterType((*CvlApiCliInbandT)(nil), "fdio.cvl_api_cli_inband_t")
	proto.RegisterType((*CvlApiCliReplyT)(nil), "fdio.cvl_api_cli_reply_t")
	proto.RegisterType((*CvlApiCliInbandReplyT)(nil), "fdio.cvl_api_cli_inband_reply_t")
	proto.RegisterType((*CvlApiSetArpNeighborLimitT)(nil), "fdio.cvl_api_set_arp_neighbor_limit_t")
	proto.RegisterType((*CvlApiSetArpNeighborLimitReplyT)(nil), "fdio.cvl_api_set_arp_neighbor_limit_reply_t")
	proto.RegisterType((*CvlApiL2PatchAddDelT)(nil), "fdio.cvl_api_l2_patch_add_del_t")
	proto.RegisterType((*CvlApiL2PatchAddDelReplyT)(nil), "fdio.cvl_api_l2_patch_add_del_reply_t")
	proto.RegisterType((*CvlApiSwInterfaceSetVpathT)(nil), "fdio.cvl_api_sw_interface_set_vpath_t")
	proto.RegisterType((*CvlApiSwInterfaceSetVpathReplyT)(nil), "fdio.cvl_api_sw_interface_set_vpath_reply_t")
	proto.RegisterType((*CvlApiSwInterfaceSetL2XconnectT)(nil), "fdio.cvl_api_sw_interface_set_l2_xconnect_t")
	proto.RegisterType((*CvlApiSwInterfaceSetL2XconnectReplyT)(nil), "fdio.cvl_api_sw_interface_set_l2_xconnect_reply_t")
	proto.RegisterType((*CvlApiSwInterfaceSetL2BridgeT)(nil), "fdio.cvl_api_sw_interface_set_l2_bridge_t")
	proto.RegisterType((*CvlApiSwInterfaceSetL2BridgeReplyT)(nil), "fdio.cvl_api_sw_interface_set_l2_bridge_reply_t")
	proto.RegisterType((*CvlApiBdIpMacAddDelT)(nil), "fdio.cvl_api_bd_ip_mac_add_del_t")
	proto.RegisterType((*CvlApiBdIpMacAddDelReplyT)(nil), "fdio.cvl_api_bd_ip_mac_add_del_reply_t")
	proto.RegisterType((*CvlApiClassifySetInterfaceIpTableT)(nil), "fdio.cvl_api_classify_set_interface_ip_table_t")
	proto.RegisterType((*CvlApiClassifySetInterfaceIpTableReplyT)(nil), "fdio.cvl_api_classify_set_interface_ip_table_reply_t")
	proto.RegisterType((*CvlApiClassifySetInterfaceL2TablesT)(nil), "fdio.cvl_api_classify_set_interface_l2_tables_t")
	proto.RegisterType((*CvlApiClassifySetInterfaceL2TablesReplyT)(nil), "fdio.cvl_api_classify_set_interface_l2_tables_reply_t")
	proto.RegisterType((*CvlApiGetNodeIndexT)(nil), "fdio.cvl_api_get_node_index_t")
	proto.RegisterType((*CvlApiGetNodeIndexReplyT)(nil), "fdio.cvl_api_get_node_index_reply_t")
	proto.RegisterType((*CvlApiAddNodeNextT)(nil), "fdio.cvl_api_add_node_next_t")
	proto.RegisterType((*CvlApiAddNodeNextReplyT)(nil), "fdio.cvl_api_add_node_next_reply_t")
	proto.RegisterType((*CvlApiL2InterfaceEfpFilterT)(nil), "fdio.cvl_api_l2_interface_efp_filter_t")
	proto.RegisterType((*CvlApiL2InterfaceEfpFilterReplyT)(nil), "fdio.cvl_api_l2_interface_efp_filter_reply_t")
	proto.RegisterType((*CvlApiCreateSubifT)(nil), "fdio.cvl_api_create_subif_t")
	proto.RegisterType((*CvlApiCreateSubifReplyT)(nil), "fdio.cvl_api_create_subif_reply_t")
	proto.RegisterType((*CvlApiShowVersionT)(nil), "fdio.cvl_api_show_version_t")
	proto.RegisterType((*CvlApiShowVersionReplyT)(nil), "fdio.cvl_api_show_version_reply_t")
	proto.RegisterType((*CvlApiInterfaceNameRenumberT)(nil), "fdio.cvl_api_interface_name_renumber_t")
	proto.RegisterType((*CvlApiInterfaceNameRenumberReplyT)(nil), "fdio.cvl_api_interface_name_renumber_reply_t")
	proto.RegisterType((*CvlApiWantIp4ArpEventsT)(nil), "fdio.cvl_api_want_ip4_arp_events_t")
	proto.RegisterType((*CvlApiWantIp4ArpEventsReplyT)(nil), "fdio.cvl_api_want_ip4_arp_events_reply_t")
	proto.RegisterType((*CvlApiIp4ArpEventT)(nil), "fdio.cvl_api_ip4_arp_event_t")
	proto.RegisterType((*CvlApiWantIp6NdEventsT)(nil), "fdio.cvl_api_want_ip6_nd_events_t")
	proto.RegisterType((*CvlApiWantIp6NdEventsReplyT)(nil), "fdio.cvl_api_want_ip6_nd_events_reply_t")
	proto.RegisterType((*CvlApiIp6NdEventT)(nil), "fdio.cvl_api_ip6_nd_event_t")
	proto.RegisterType((*CvlApiInputAclSetInterfaceT)(nil), "fdio.cvl_api_input_acl_set_interface_t")
	proto.RegisterType((*CvlApiInputAclSetInterfaceReplyT)(nil), "fdio.cvl_api_input_acl_set_interface_reply_t")
	proto.RegisterType((*CvlApiGetNodeGraphT)(nil), "fdio.cvl_api_get_node_graph_t")
	proto.RegisterType((*CvlApiGetNodeGraphReplyT)(nil), "fdio.cvl_api_get_node_graph_reply_t")
	proto.RegisterType((*CvlApiIoamEnableT)(nil), "fdio.cvl_api_ioam_enable_t")
	proto.RegisterType((*CvlApiIoamEnableReplyT)(nil), "fdio.cvl_api_ioam_enable_reply_t")
	proto.RegisterType((*CvlApiIoamDisableT)(nil), "fdio.cvl_api_ioam_disable_t")
	proto.RegisterType((*CvlApiIoamDisableReplyT)(nil), "fdio.cvl_api_ioam_disable_reply_t")
	proto.RegisterType((*CvlApiGetNextIndexT)(nil), "fdio.cvl_api_get_next_index_t")
	proto.RegisterType((*CvlApiGetNextIndexReplyT)(nil), "fdio.cvl_api_get_next_index_reply_t")
	proto.RegisterType((*CvlApiPgCreateInterfaceT)(nil), "fdio.cvl_api_pg_create_interface_t")
	proto.RegisterType((*CvlApiPgCreateInterfaceReplyT)(nil), "fdio.cvl_api_pg_create_interface_reply_t")
	proto.RegisterType((*CvlApiPgCaptureT)(nil), "fdio.cvl_api_pg_capture_t")
	proto.RegisterType((*CvlApiPgCaptureReplyT)(nil), "fdio.cvl_api_pg_capture_reply_t")
	proto.RegisterType((*CvlApiPgEnableDisableT)(nil), "fdio.cvl_api_pg_enable_disable_t")
	proto.RegisterType((*CvlApiPgEnableDisableReplyT)(nil), "fdio.cvl_api_pg_enable_disable_reply_t")
	proto.RegisterType((*CvlApiIpSourceAndPortRangeCheckAddDelT)(nil), "fdio.cvl_api_ip_source_and_port_range_check_add_del_t")
	proto.RegisterType((*CvlApiIpSourceAndPortRangeCheckAddDelReplyT)(nil), "fdio.cvl_api_ip_source_and_port_range_check_add_del_reply_t")
	proto.RegisterType((*CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT)(nil), "fdio.cvl_api_ip_source_and_port_range_check_interface_add_del_t")
	proto.RegisterType((*CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT)(nil), "fdio.cvl_api_ip_source_and_port_range_check_interface_add_del_reply_t")
	proto.RegisterType((*CvlApiDeleteSubifT)(nil), "fdio.cvl_api_delete_subif_t")
	proto.RegisterType((*CvlApiDeleteSubifReplyT)(nil), "fdio.cvl_api_delete_subif_reply_t")
	proto.RegisterType((*CvlApiPuntT)(nil), "fdio.cvl_api_punt_t")
	proto.RegisterType((*CvlApiPuntReplyT)(nil), "fdio.cvl_api_punt_reply_t")
	proto.RegisterType((*CvlApiFeatureEnableDisableT)(nil), "fdio.cvl_api_feature_enable_disable_t")
	proto.RegisterType((*CvlApiFeatureEnableDisableReplyT)(nil), "fdio.cvl_api_feature_enable_disable_reply_t")
}
func (m *CvlApiCreateVlanSubifT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCreateVlanSubifT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.VlanId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VlanId))
	}
	return i, nil
}

func (m *CvlApiCreateVlanSubifReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCreateVlanSubifReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	return i, nil
}

func (m *CvlApiSwInterfaceSetMplsEnableT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSwInterfaceSetMplsEnableT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.Enable != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Enable))
	}
	return i, nil
}

func (m *CvlApiSwInterfaceSetMplsEnableReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSwInterfaceSetMplsEnableReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiProxyArpAddDelT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiProxyArpAddDelT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.VrfId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VrfId))
	}
	if m.IsAdd != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsAdd))
	}
	if len(m.LowAddress) > 0 {
		for _, b := range m.LowAddress {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.HiAddress) > 0 {
		for _, b := range m.HiAddress {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiProxyArpAddDelReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiProxyArpAddDelReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiProxyArpIntfcEnableDisableT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiProxyArpIntfcEnableDisableT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.EnableDisable != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.EnableDisable))
	}
	return i, nil
}

func (m *CvlApiProxyArpIntfcEnableDisableReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiProxyArpIntfcEnableDisableReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiResetVrfT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiResetVrfT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.IsIpv6 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsIpv6))
	}
	if m.VrfId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VrfId))
	}
	return i, nil
}

func (m *CvlApiResetVrfReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiResetVrfReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiIsAddressReachableT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIsAddressReachableT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.NextHopSwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.NextHopSwIfIndex))
	}
	if m.IsKnown != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsKnown))
	}
	if m.IsIpv6 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsIpv6))
	}
	if m.IsError != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsError))
	}
	if len(m.Address) > 0 {
		for _, b := range m.Address {
			dAtA[i] = 0x42
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiWantStatsT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiWantStatsT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.EnableDisable != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.EnableDisable))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Pid))
	}
	return i, nil
}

func (m *CvlApiWantStatsReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiWantStatsReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiIp4FibCounterT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIp4FibCounterT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Address))
	}
	if m.AddressLength != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.AddressLength))
	}
	if m.Packets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Packets))
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Bytes))
	}
	return i, nil
}

func (m *CvlApiVnetIp4FibCountersT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiVnetIp4FibCountersT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.VrfId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VrfId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Count))
	}
	if len(m.C) > 0 {
		for _, msg := range m.C {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CvlApiIp4NbrCounterT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIp4NbrCounterT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Address))
	}
	if m.LinkType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.LinkType))
	}
	if m.Packets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Packets))
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Bytes))
	}
	return i, nil
}

func (m *CvlApiVnetIp4NbrCountersT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiVnetIp4NbrCountersT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Count))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.Begin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Begin))
	}
	if len(m.C) > 0 {
		for _, msg := range m.C {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CvlApiIp6FibCounterT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIp6FibCounterT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA2 := make([]byte, len(m.Address)*10)
		var j1 int
		for _, num1 := range m.Address {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.AddressLength != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.AddressLength))
	}
	if m.Packets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Packets))
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Bytes))
	}
	return i, nil
}

func (m *CvlApiVnetIp6FibCountersT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiVnetIp6FibCountersT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.VrfId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VrfId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Count))
	}
	if len(m.C) > 0 {
		for _, msg := range m.C {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CvlApiIp6NbrCounterT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIp6NbrCounterT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA4 := make([]byte, len(m.Address)*10)
		var j3 int
		for _, num1 := range m.Address {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.LinkType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.LinkType))
	}
	if m.Packets != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Packets))
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Bytes))
	}
	return i, nil
}

func (m *CvlApiVnetIp6NbrCountersT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiVnetIp6NbrCountersT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Count))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.Begin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Begin))
	}
	if len(m.C) > 0 {
		for _, msg := range m.C {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CvlApiVnetGetSummaryStatsT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiVnetGetSummaryStatsT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	return i, nil
}

func (m *CvlApiVnetSummaryStatsReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiVnetSummaryStatsReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if len(m.TotalPkts) > 0 {
		dAtA6 := make([]byte, len(m.TotalPkts)*10)
		var j5 int
		for _, num1 := range m.TotalPkts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.TotalBytes) > 0 {
		dAtA8 := make([]byte, len(m.TotalBytes)*10)
		var j7 int
		for _, num1 := range m.TotalBytes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.VectorRate != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64VpeApi(dAtA, i, uint64(math.Float64bits(float64(m.VectorRate))))
	}
	return i, nil
}

func (m *CvlApiOamEventT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiOamEventT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if len(m.DstAddress) > 0 {
		for _, b := range m.DstAddress {
			dAtA[i] = 0x12
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *CvlApiWantOamEventsT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiWantOamEventsT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.EnableDisable != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.EnableDisable))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Pid))
	}
	return i, nil
}

func (m *CvlApiWantOamEventsReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiWantOamEventsReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiOamAddDelT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiOamAddDelT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.VrfId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VrfId))
	}
	if len(m.SrcAddress) > 0 {
		for _, b := range m.SrcAddress {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.DstAddress) > 0 {
		for _, b := range m.DstAddress {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.IsAdd != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsAdd))
	}
	return i, nil
}

func (m *CvlApiOamAddDelReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiOamAddDelReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiResetFibT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiResetFibT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.VrfId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VrfId))
	}
	if m.IsIpv6 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsIpv6))
	}
	return i, nil
}

func (m *CvlApiResetFibReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiResetFibReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiCreateLoopbackT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCreateLoopbackT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if len(m.MacAddress) > 0 {
		for _, b := range m.MacAddress {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiCreateLoopbackReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCreateLoopbackReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	return i, nil
}

func (m *CvlApiCreateLoopbackInstanceT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCreateLoopbackInstanceT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if len(m.MacAddress) > 0 {
		for _, b := range m.MacAddress {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.IsSpecified != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsSpecified))
	}
	if m.UserInstance != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.UserInstance))
	}
	return i, nil
}

func (m *CvlApiCreateLoopbackInstanceReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCreateLoopbackInstanceReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	return i, nil
}

func (m *CvlApiDeleteLoopbackT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiDeleteLoopbackT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	return i, nil
}

func (m *CvlApiDeleteLoopbackReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiDeleteLoopbackReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiControlPingT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiControlPingT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	return i, nil
}

func (m *CvlApiControlPingReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiControlPingReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.VpePid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VpePid))
	}
	return i, nil
}

func (m *CvlApiCliRequestT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCliRequestT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.CmdInShmem != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.CmdInShmem))
	}
	return i, nil
}

func (m *CvlApiCliInbandT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCliInbandT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Length != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Length))
	}
	if len(m.Cmd) > 0 {
		for _, b := range m.Cmd {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiCliReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCliReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.ReplyInShmem != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ReplyInShmem))
	}
	return i, nil
}

func (m *CvlApiCliInbandReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCliInbandReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.Length != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Length))
	}
	if len(m.Reply) > 0 {
		for _, b := range m.Reply {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiSetArpNeighborLimitT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSetArpNeighborLimitT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.IsIpv6 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsIpv6))
	}
	if m.ArpNeighborLimit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ArpNeighborLimit))
	}
	return i, nil
}

func (m *CvlApiSetArpNeighborLimitReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSetArpNeighborLimitReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiL2PatchAddDelT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiL2PatchAddDelT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.RxSwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.RxSwIfIndex))
	}
	if m.TxSwIfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.TxSwIfIndex))
	}
	if m.IsAdd != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsAdd))
	}
	return i, nil
}

func (m *CvlApiL2PatchAddDelReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiL2PatchAddDelReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiSwInterfaceSetVpathT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSwInterfaceSetVpathT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.Enable != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Enable))
	}
	return i, nil
}

func (m *CvlApiSwInterfaceSetVpathReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSwInterfaceSetVpathReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiSwInterfaceSetL2XconnectT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSwInterfaceSetL2XconnectT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.RxSwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.RxSwIfIndex))
	}
	if m.TxSwIfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.TxSwIfIndex))
	}
	if m.Enable != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Enable))
	}
	return i, nil
}

func (m *CvlApiSwInterfaceSetL2XconnectReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSwInterfaceSetL2XconnectReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiSwInterfaceSetL2BridgeT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSwInterfaceSetL2BridgeT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.RxSwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.RxSwIfIndex))
	}
	if m.BdId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.BdId))
	}
	if m.Shg != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Shg))
	}
	if m.Bvi != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Bvi))
	}
	if m.Enable != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Enable))
	}
	return i, nil
}

func (m *CvlApiSwInterfaceSetL2BridgeReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiSwInterfaceSetL2BridgeReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiBdIpMacAddDelT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiBdIpMacAddDelT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.BdId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.BdId))
	}
	if m.IsAdd != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsAdd))
	}
	if m.IsIpv6 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsIpv6))
	}
	if len(m.IpAddress) > 0 {
		for _, b := range m.IpAddress {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.MacAddress) > 0 {
		for _, b := range m.MacAddress {
			dAtA[i] = 0x42
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiBdIpMacAddDelReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiBdIpMacAddDelReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiClassifySetInterfaceIpTableT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiClassifySetInterfaceIpTableT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.IsIpv6 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsIpv6))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.TableIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.TableIndex))
	}
	return i, nil
}

func (m *CvlApiClassifySetInterfaceIpTableReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiClassifySetInterfaceIpTableReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiClassifySetInterfaceL2TablesT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiClassifySetInterfaceL2TablesT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.Ip4TableIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Ip4TableIndex))
	}
	if m.Ip6TableIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Ip6TableIndex))
	}
	if m.OtherTableIndex != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.OtherTableIndex))
	}
	if m.IsInput != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsInput))
	}
	return i, nil
}

func (m *CvlApiClassifySetInterfaceL2TablesReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiClassifySetInterfaceL2TablesReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiGetNodeIndexT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiGetNodeIndexT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if len(m.NodeName) > 0 {
		for _, b := range m.NodeName {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiGetNodeIndexReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiGetNodeIndexReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.NodeIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.NodeIndex))
	}
	return i, nil
}

func (m *CvlApiAddNodeNextT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiAddNodeNextT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if len(m.NodeName) > 0 {
		for _, b := range m.NodeName {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NextName) > 0 {
		for _, b := range m.NextName {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiAddNodeNextReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiAddNodeNextReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.NextIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.NextIndex))
	}
	return i, nil
}

func (m *CvlApiL2InterfaceEfpFilterT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiL2InterfaceEfpFilterT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.EnableDisable != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.EnableDisable))
	}
	return i, nil
}

func (m *CvlApiL2InterfaceEfpFilterReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiL2InterfaceEfpFilterReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiCreateSubifT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCreateSubifT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.SubId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SubId))
	}
	if m.NoTags != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.NoTags))
	}
	if m.OneTag != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.OneTag))
	}
	if m.TwoTags != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.TwoTags))
	}
	if m.Dot1Ad != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Dot1Ad))
	}
	if m.ExactMatch != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ExactMatch))
	}
	if m.DefaultSub != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.DefaultSub))
	}
	if m.OuterVlanIdAny != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.OuterVlanIdAny))
	}
	if m.InnerVlanIdAny != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.InnerVlanIdAny))
	}
	if m.OuterVlanId != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.OuterVlanId))
	}
	if m.InnerVlanId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.InnerVlanId))
	}
	return i, nil
}

func (m *CvlApiCreateSubifReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiCreateSubifReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	return i, nil
}

func (m *CvlApiShowVersionT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiShowVersionT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	return i, nil
}

func (m *CvlApiShowVersionReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiShowVersionReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if len(m.Program) > 0 {
		for _, b := range m.Program {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Version) > 0 {
		for _, b := range m.Version {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.BuildDate) > 0 {
		for _, b := range m.BuildDate {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.BuildDirectory) > 0 {
		for _, b := range m.BuildDirectory {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiInterfaceNameRenumberT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiInterfaceNameRenumberT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.NewShowDevInstance != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.NewShowDevInstance))
	}
	return i, nil
}

func (m *CvlApiInterfaceNameRenumberReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiInterfaceNameRenumberReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiWantIp4ArpEventsT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiWantIp4ArpEventsT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.EnableDisable != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.EnableDisable))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Pid))
	}
	if m.Address != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Address))
	}
	return i, nil
}

func (m *CvlApiWantIp4ArpEventsReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiWantIp4ArpEventsReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiIp4ArpEventT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIp4ArpEventT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Address != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Address))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Pid))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if len(m.NewMac) > 0 {
		for _, b := range m.NewMac {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.MacIp != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.MacIp))
	}
	return i, nil
}

func (m *CvlApiWantIp6NdEventsT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiWantIp6NdEventsT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.EnableDisable != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.EnableDisable))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Pid))
	}
	if len(m.Address) > 0 {
		for _, b := range m.Address {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiWantIp6NdEventsReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiWantIp6NdEventsReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiIp6NdEventT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIp6NdEventT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Pid))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if len(m.Address) > 0 {
		for _, b := range m.Address {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NewMac) > 0 {
		for _, b := range m.NewMac {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.MacIp != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.MacIp))
	}
	return i, nil
}

func (m *CvlApiInputAclSetInterfaceT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiInputAclSetInterfaceT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.Ip4TableIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Ip4TableIndex))
	}
	if m.Ip6TableIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Ip6TableIndex))
	}
	if m.L2TableIndex != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.L2TableIndex))
	}
	if m.IsAdd != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsAdd))
	}
	return i, nil
}

func (m *CvlApiInputAclSetInterfaceReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiInputAclSetInterfaceReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiGetNodeGraphT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiGetNodeGraphT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	return i, nil
}

func (m *CvlApiGetNodeGraphReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiGetNodeGraphReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.ReplyInShmem != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ReplyInShmem))
	}
	return i, nil
}

func (m *CvlApiIoamEnableT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIoamEnableT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Id))
	}
	if m.Seqno != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Seqno))
	}
	if m.Analyse != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Analyse))
	}
	if m.PotEnable != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.PotEnable))
	}
	if m.TraceEnable != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.TraceEnable))
	}
	if m.NodeId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.NodeId))
	}
	return i, nil
}

func (m *CvlApiIoamEnableReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIoamEnableReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiIoamDisableT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIoamDisableT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *CvlApiIoamDisableReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIoamDisableReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiGetNextIndexT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiGetNextIndexT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if len(m.NodeName) > 0 {
		for _, b := range m.NodeName {
			dAtA[i] = 0x22
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NextName) > 0 {
		for _, b := range m.NextName {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiGetNextIndexReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiGetNextIndexReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.NextIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.NextIndex))
	}
	return i, nil
}

func (m *CvlApiPgCreateInterfaceT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiPgCreateInterfaceT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.InterfaceId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.InterfaceId))
	}
	return i, nil
}

func (m *CvlApiPgCreateInterfaceReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiPgCreateInterfaceReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	return i, nil
}

func (m *CvlApiPgCaptureT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiPgCaptureT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.InterfaceId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.InterfaceId))
	}
	if m.IsEnabled != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsEnabled))
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Count))
	}
	if m.PcapNameLength != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.PcapNameLength))
	}
	if len(m.PcapFileName) > 0 {
		for _, b := range m.PcapFileName {
			dAtA[i] = 0x42
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiPgCaptureReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiPgCaptureReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiPgEnableDisableT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiPgEnableDisableT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.IsEnabled != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsEnabled))
	}
	if m.StreamNameLength != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.StreamNameLength))
	}
	if len(m.StreamName) > 0 {
		for _, b := range m.StreamName {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiPgEnableDisableReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiPgEnableDisableReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.IsIpv6 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsIpv6))
	}
	if m.IsAdd != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsAdd))
	}
	if m.MaskLength != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.MaskLength))
	}
	if len(m.Address) > 0 {
		for _, b := range m.Address {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.NumberOfRanges != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.NumberOfRanges))
	}
	if len(m.LowPorts) > 0 {
		dAtA10 := make([]byte, len(m.LowPorts)*10)
		var j9 int
		for _, num1 := range m.LowPorts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x4a
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.HighPorts) > 0 {
		dAtA12 := make([]byte, len(m.HighPorts)*10)
		var j11 int
		for _, num1 := range m.HighPorts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if m.VrfId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.VrfId))
	}
	return i, nil
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.IsAdd != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsAdd))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.TcpInVrfId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.TcpInVrfId))
	}
	if m.TcpOutVrfId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.TcpOutVrfId))
	}
	if m.UdpInVrfId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.UdpInVrfId))
	}
	if m.UdpOutVrfId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.UdpOutVrfId))
	}
	return i, nil
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiDeleteSubifT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiDeleteSubifT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	return i, nil
}

func (m *CvlApiDeleteSubifReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiDeleteSubifReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiPuntT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiPuntT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.IsAdd != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.IsAdd))
	}
	if m.Ipv != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Ipv))
	}
	if m.L4Protocol != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.L4Protocol))
	}
	if m.L4Port != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.L4Port))
	}
	return i, nil
}

func (m *CvlApiPuntReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiPuntReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func (m *CvlApiFeatureEnableDisableT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiFeatureEnableDisableT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.SwIfIndex))
	}
	if m.Enable != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Enable))
	}
	if len(m.ArcName) > 0 {
		for _, b := range m.ArcName {
			dAtA[i] = 0x32
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.FeatureName) > 0 {
		for _, b := range m.FeatureName {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVpeApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CvlApiFeatureEnableDisableReplyT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CvlApiFeatureEnableDisableReplyT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64(m.Context))
	}
	if m.Retval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVpeApi(dAtA, i, uint64((uint32(m.Retval)<<1)^uint32((m.Retval>>31))))
	}
	return i, nil
}

func encodeFixed64VpeApi(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32VpeApi(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVpeApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CvlApiCreateVlanSubifT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.VlanId != 0 {
		n += 1 + sovVpeApi(uint64(m.VlanId))
	}
	return n
}

func (m *CvlApiCreateVlanSubifReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	return n
}

func (m *CvlApiSwInterfaceSetMplsEnableT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.Enable != 0 {
		n += 1 + sovVpeApi(uint64(m.Enable))
	}
	return n
}

func (m *CvlApiSwInterfaceSetMplsEnableReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiProxyArpAddDelT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.VrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.VrfId))
	}
	if m.IsAdd != 0 {
		n += 1 + sovVpeApi(uint64(m.IsAdd))
	}
	if len(m.LowAddress) > 0 {
		for _, b := range m.LowAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.HiAddress) > 0 {
		for _, b := range m.HiAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiProxyArpAddDelReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiProxyArpIntfcEnableDisableT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.EnableDisable != 0 {
		n += 1 + sovVpeApi(uint64(m.EnableDisable))
	}
	return n
}

func (m *CvlApiProxyArpIntfcEnableDisableReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiResetVrfT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.IsIpv6 != 0 {
		n += 1 + sovVpeApi(uint64(m.IsIpv6))
	}
	if m.VrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.VrfId))
	}
	return n
}

func (m *CvlApiResetVrfReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiIsAddressReachableT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.NextHopSwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.NextHopSwIfIndex))
	}
	if m.IsKnown != 0 {
		n += 1 + sovVpeApi(uint64(m.IsKnown))
	}
	if m.IsIpv6 != 0 {
		n += 1 + sovVpeApi(uint64(m.IsIpv6))
	}
	if m.IsError != 0 {
		n += 1 + sovVpeApi(uint64(m.IsError))
	}
	if len(m.Address) > 0 {
		for _, b := range m.Address {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiWantStatsT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.EnableDisable != 0 {
		n += 1 + sovVpeApi(uint64(m.EnableDisable))
	}
	if m.Pid != 0 {
		n += 1 + sovVpeApi(uint64(m.Pid))
	}
	return n
}

func (m *CvlApiWantStatsReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiIp4FibCounterT) Size() (n int) {
	var l int
	_ = l
	if m.Address != 0 {
		n += 1 + sovVpeApi(uint64(m.Address))
	}
	if m.AddressLength != 0 {
		n += 1 + sovVpeApi(uint64(m.AddressLength))
	}
	if m.Packets != 0 {
		n += 1 + sovVpeApi(uint64(m.Packets))
	}
	if m.Bytes != 0 {
		n += 1 + sovVpeApi(uint64(m.Bytes))
	}
	return n
}

func (m *CvlApiVnetIp4FibCountersT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.VrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.VrfId))
	}
	if m.Count != 0 {
		n += 1 + sovVpeApi(uint64(m.Count))
	}
	if len(m.C) > 0 {
		for _, e := range m.C {
			l = e.Size()
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiIp4NbrCounterT) Size() (n int) {
	var l int
	_ = l
	if m.Address != 0 {
		n += 1 + sovVpeApi(uint64(m.Address))
	}
	if m.LinkType != 0 {
		n += 1 + sovVpeApi(uint64(m.LinkType))
	}
	if m.Packets != 0 {
		n += 1 + sovVpeApi(uint64(m.Packets))
	}
	if m.Bytes != 0 {
		n += 1 + sovVpeApi(uint64(m.Bytes))
	}
	return n
}

func (m *CvlApiVnetIp4NbrCountersT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Count != 0 {
		n += 1 + sovVpeApi(uint64(m.Count))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.Begin != 0 {
		n += 1 + sovVpeApi(uint64(m.Begin))
	}
	if len(m.C) > 0 {
		for _, e := range m.C {
			l = e.Size()
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiIp6FibCounterT) Size() (n int) {
	var l int
	_ = l
	if len(m.Address) > 0 {
		l = 0
		for _, e := range m.Address {
			l += sovVpeApi(uint64(e))
		}
		n += 1 + sovVpeApi(uint64(l)) + l
	}
	if m.AddressLength != 0 {
		n += 1 + sovVpeApi(uint64(m.AddressLength))
	}
	if m.Packets != 0 {
		n += 1 + sovVpeApi(uint64(m.Packets))
	}
	if m.Bytes != 0 {
		n += 1 + sovVpeApi(uint64(m.Bytes))
	}
	return n
}

func (m *CvlApiVnetIp6FibCountersT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.VrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.VrfId))
	}
	if m.Count != 0 {
		n += 1 + sovVpeApi(uint64(m.Count))
	}
	if len(m.C) > 0 {
		for _, e := range m.C {
			l = e.Size()
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiIp6NbrCounterT) Size() (n int) {
	var l int
	_ = l
	if len(m.Address) > 0 {
		l = 0
		for _, e := range m.Address {
			l += sovVpeApi(uint64(e))
		}
		n += 1 + sovVpeApi(uint64(l)) + l
	}
	if m.LinkType != 0 {
		n += 1 + sovVpeApi(uint64(m.LinkType))
	}
	if m.Packets != 0 {
		n += 1 + sovVpeApi(uint64(m.Packets))
	}
	if m.Bytes != 0 {
		n += 1 + sovVpeApi(uint64(m.Bytes))
	}
	return n
}

func (m *CvlApiVnetIp6NbrCountersT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Count != 0 {
		n += 1 + sovVpeApi(uint64(m.Count))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.Begin != 0 {
		n += 1 + sovVpeApi(uint64(m.Begin))
	}
	if len(m.C) > 0 {
		for _, e := range m.C {
			l = e.Size()
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiVnetGetSummaryStatsT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	return n
}

func (m *CvlApiVnetSummaryStatsReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if len(m.TotalPkts) > 0 {
		l = 0
		for _, e := range m.TotalPkts {
			l += sovVpeApi(uint64(e))
		}
		n += 1 + sovVpeApi(uint64(l)) + l
	}
	if len(m.TotalBytes) > 0 {
		l = 0
		for _, e := range m.TotalBytes {
			l += sovVpeApi(uint64(e))
		}
		n += 1 + sovVpeApi(uint64(l)) + l
	}
	if m.VectorRate != 0 {
		n += 9
	}
	return n
}

func (m *CvlApiOamEventT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if len(m.DstAddress) > 0 {
		for _, b := range m.DstAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovVpeApi(uint64(m.State))
	}
	return n
}

func (m *CvlApiWantOamEventsT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.EnableDisable != 0 {
		n += 1 + sovVpeApi(uint64(m.EnableDisable))
	}
	if m.Pid != 0 {
		n += 1 + sovVpeApi(uint64(m.Pid))
	}
	return n
}

func (m *CvlApiWantOamEventsReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiOamAddDelT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.VrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.VrfId))
	}
	if len(m.SrcAddress) > 0 {
		for _, b := range m.SrcAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.DstAddress) > 0 {
		for _, b := range m.DstAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if m.IsAdd != 0 {
		n += 1 + sovVpeApi(uint64(m.IsAdd))
	}
	return n
}

func (m *CvlApiOamAddDelReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiResetFibT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.VrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.VrfId))
	}
	if m.IsIpv6 != 0 {
		n += 1 + sovVpeApi(uint64(m.IsIpv6))
	}
	return n
}

func (m *CvlApiResetFibReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiCreateLoopbackT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if len(m.MacAddress) > 0 {
		for _, b := range m.MacAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiCreateLoopbackReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	return n
}

func (m *CvlApiCreateLoopbackInstanceT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if len(m.MacAddress) > 0 {
		for _, b := range m.MacAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if m.IsSpecified != 0 {
		n += 1 + sovVpeApi(uint64(m.IsSpecified))
	}
	if m.UserInstance != 0 {
		n += 1 + sovVpeApi(uint64(m.UserInstance))
	}
	return n
}

func (m *CvlApiCreateLoopbackInstanceReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	return n
}

func (m *CvlApiDeleteLoopbackT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	return n
}

func (m *CvlApiDeleteLoopbackReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiControlPingT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	return n
}

func (m *CvlApiControlPingReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.VpePid != 0 {
		n += 1 + sovVpeApi(uint64(m.VpePid))
	}
	return n
}

func (m *CvlApiCliRequestT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.CmdInShmem != 0 {
		n += 1 + sovVpeApi(uint64(m.CmdInShmem))
	}
	return n
}

func (m *CvlApiCliInbandT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Length != 0 {
		n += 1 + sovVpeApi(uint64(m.Length))
	}
	if len(m.Cmd) > 0 {
		for _, b := range m.Cmd {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiCliReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.ReplyInShmem != 0 {
		n += 1 + sovVpeApi(uint64(m.ReplyInShmem))
	}
	return n
}

func (m *CvlApiCliInbandReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.Length != 0 {
		n += 1 + sovVpeApi(uint64(m.Length))
	}
	if len(m.Reply) > 0 {
		for _, b := range m.Reply {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiSetArpNeighborLimitT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.IsIpv6 != 0 {
		n += 1 + sovVpeApi(uint64(m.IsIpv6))
	}
	if m.ArpNeighborLimit != 0 {
		n += 1 + sovVpeApi(uint64(m.ArpNeighborLimit))
	}
	return n
}

func (m *CvlApiSetArpNeighborLimitReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiL2PatchAddDelT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.RxSwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.RxSwIfIndex))
	}
	if m.TxSwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.TxSwIfIndex))
	}
	if m.IsAdd != 0 {
		n += 1 + sovVpeApi(uint64(m.IsAdd))
	}
	return n
}

func (m *CvlApiL2PatchAddDelReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiSwInterfaceSetVpathT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.Enable != 0 {
		n += 1 + sovVpeApi(uint64(m.Enable))
	}
	return n
}

func (m *CvlApiSwInterfaceSetVpathReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiSwInterfaceSetL2XconnectT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.RxSwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.RxSwIfIndex))
	}
	if m.TxSwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.TxSwIfIndex))
	}
	if m.Enable != 0 {
		n += 1 + sovVpeApi(uint64(m.Enable))
	}
	return n
}

func (m *CvlApiSwInterfaceSetL2XconnectReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiSwInterfaceSetL2BridgeT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.RxSwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.RxSwIfIndex))
	}
	if m.BdId != 0 {
		n += 1 + sovVpeApi(uint64(m.BdId))
	}
	if m.Shg != 0 {
		n += 1 + sovVpeApi(uint64(m.Shg))
	}
	if m.Bvi != 0 {
		n += 1 + sovVpeApi(uint64(m.Bvi))
	}
	if m.Enable != 0 {
		n += 1 + sovVpeApi(uint64(m.Enable))
	}
	return n
}

func (m *CvlApiSwInterfaceSetL2BridgeReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiBdIpMacAddDelT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.BdId != 0 {
		n += 1 + sovVpeApi(uint64(m.BdId))
	}
	if m.IsAdd != 0 {
		n += 1 + sovVpeApi(uint64(m.IsAdd))
	}
	if m.IsIpv6 != 0 {
		n += 1 + sovVpeApi(uint64(m.IsIpv6))
	}
	if len(m.IpAddress) > 0 {
		for _, b := range m.IpAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.MacAddress) > 0 {
		for _, b := range m.MacAddress {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiBdIpMacAddDelReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiClassifySetInterfaceIpTableT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.IsIpv6 != 0 {
		n += 1 + sovVpeApi(uint64(m.IsIpv6))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.TableIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.TableIndex))
	}
	return n
}

func (m *CvlApiClassifySetInterfaceIpTableReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiClassifySetInterfaceL2TablesT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.Ip4TableIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.Ip4TableIndex))
	}
	if m.Ip6TableIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.Ip6TableIndex))
	}
	if m.OtherTableIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.OtherTableIndex))
	}
	if m.IsInput != 0 {
		n += 1 + sovVpeApi(uint64(m.IsInput))
	}
	return n
}

func (m *CvlApiClassifySetInterfaceL2TablesReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiGetNodeIndexT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if len(m.NodeName) > 0 {
		for _, b := range m.NodeName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiGetNodeIndexReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.NodeIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.NodeIndex))
	}
	return n
}

func (m *CvlApiAddNodeNextT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if len(m.NodeName) > 0 {
		for _, b := range m.NodeName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.NextName) > 0 {
		for _, b := range m.NextName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiAddNodeNextReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.NextIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.NextIndex))
	}
	return n
}

func (m *CvlApiL2InterfaceEfpFilterT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.EnableDisable != 0 {
		n += 1 + sovVpeApi(uint64(m.EnableDisable))
	}
	return n
}

func (m *CvlApiL2InterfaceEfpFilterReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiCreateSubifT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.SubId != 0 {
		n += 1 + sovVpeApi(uint64(m.SubId))
	}
	if m.NoTags != 0 {
		n += 1 + sovVpeApi(uint64(m.NoTags))
	}
	if m.OneTag != 0 {
		n += 1 + sovVpeApi(uint64(m.OneTag))
	}
	if m.TwoTags != 0 {
		n += 1 + sovVpeApi(uint64(m.TwoTags))
	}
	if m.Dot1Ad != 0 {
		n += 1 + sovVpeApi(uint64(m.Dot1Ad))
	}
	if m.ExactMatch != 0 {
		n += 1 + sovVpeApi(uint64(m.ExactMatch))
	}
	if m.DefaultSub != 0 {
		n += 1 + sovVpeApi(uint64(m.DefaultSub))
	}
	if m.OuterVlanIdAny != 0 {
		n += 1 + sovVpeApi(uint64(m.OuterVlanIdAny))
	}
	if m.InnerVlanIdAny != 0 {
		n += 1 + sovVpeApi(uint64(m.InnerVlanIdAny))
	}
	if m.OuterVlanId != 0 {
		n += 1 + sovVpeApi(uint64(m.OuterVlanId))
	}
	if m.InnerVlanId != 0 {
		n += 1 + sovVpeApi(uint64(m.InnerVlanId))
	}
	return n
}

func (m *CvlApiCreateSubifReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	return n
}

func (m *CvlApiShowVersionT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	return n
}

func (m *CvlApiShowVersionReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if len(m.Program) > 0 {
		for _, b := range m.Program {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.Version) > 0 {
		for _, b := range m.Version {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.BuildDate) > 0 {
		for _, b := range m.BuildDate {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.BuildDirectory) > 0 {
		for _, b := range m.BuildDirectory {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiInterfaceNameRenumberT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.NewShowDevInstance != 0 {
		n += 1 + sovVpeApi(uint64(m.NewShowDevInstance))
	}
	return n
}

func (m *CvlApiInterfaceNameRenumberReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiWantIp4ArpEventsT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.EnableDisable != 0 {
		n += 1 + sovVpeApi(uint64(m.EnableDisable))
	}
	if m.Pid != 0 {
		n += 1 + sovVpeApi(uint64(m.Pid))
	}
	if m.Address != 0 {
		n += 1 + sovVpeApi(uint64(m.Address))
	}
	return n
}

func (m *CvlApiWantIp4ArpEventsReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiIp4ArpEventT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Address != 0 {
		n += 1 + sovVpeApi(uint64(m.Address))
	}
	if m.Pid != 0 {
		n += 1 + sovVpeApi(uint64(m.Pid))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if len(m.NewMac) > 0 {
		for _, b := range m.NewMac {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if m.MacIp != 0 {
		n += 1 + sovVpeApi(uint64(m.MacIp))
	}
	return n
}

func (m *CvlApiWantIp6NdEventsT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.EnableDisable != 0 {
		n += 1 + sovVpeApi(uint64(m.EnableDisable))
	}
	if m.Pid != 0 {
		n += 1 + sovVpeApi(uint64(m.Pid))
	}
	if len(m.Address) > 0 {
		for _, b := range m.Address {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiWantIp6NdEventsReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiIp6NdEventT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Pid != 0 {
		n += 1 + sovVpeApi(uint64(m.Pid))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if len(m.Address) > 0 {
		for _, b := range m.Address {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.NewMac) > 0 {
		for _, b := range m.NewMac {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if m.MacIp != 0 {
		n += 1 + sovVpeApi(uint64(m.MacIp))
	}
	return n
}

func (m *CvlApiInputAclSetInterfaceT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.Ip4TableIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.Ip4TableIndex))
	}
	if m.Ip6TableIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.Ip6TableIndex))
	}
	if m.L2TableIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.L2TableIndex))
	}
	if m.IsAdd != 0 {
		n += 1 + sovVpeApi(uint64(m.IsAdd))
	}
	return n
}

func (m *CvlApiInputAclSetInterfaceReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiGetNodeGraphT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	return n
}

func (m *CvlApiGetNodeGraphReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.ReplyInShmem != 0 {
		n += 1 + sovVpeApi(uint64(m.ReplyInShmem))
	}
	return n
}

func (m *CvlApiIoamEnableT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Id != 0 {
		n += 1 + sovVpeApi(uint64(m.Id))
	}
	if m.Seqno != 0 {
		n += 1 + sovVpeApi(uint64(m.Seqno))
	}
	if m.Analyse != 0 {
		n += 1 + sovVpeApi(uint64(m.Analyse))
	}
	if m.PotEnable != 0 {
		n += 1 + sovVpeApi(uint64(m.PotEnable))
	}
	if m.TraceEnable != 0 {
		n += 1 + sovVpeApi(uint64(m.TraceEnable))
	}
	if m.NodeId != 0 {
		n += 1 + sovVpeApi(uint64(m.NodeId))
	}
	return n
}

func (m *CvlApiIoamEnableReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiIoamDisableT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Id != 0 {
		n += 1 + sovVpeApi(uint64(m.Id))
	}
	return n
}

func (m *CvlApiIoamDisableReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiGetNextIndexT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if len(m.NodeName) > 0 {
		for _, b := range m.NodeName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.NextName) > 0 {
		for _, b := range m.NextName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiGetNextIndexReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.NextIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.NextIndex))
	}
	return n
}

func (m *CvlApiPgCreateInterfaceT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.InterfaceId != 0 {
		n += 1 + sovVpeApi(uint64(m.InterfaceId))
	}
	return n
}

func (m *CvlApiPgCreateInterfaceReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	return n
}

func (m *CvlApiPgCaptureT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.InterfaceId != 0 {
		n += 1 + sovVpeApi(uint64(m.InterfaceId))
	}
	if m.IsEnabled != 0 {
		n += 1 + sovVpeApi(uint64(m.IsEnabled))
	}
	if m.Count != 0 {
		n += 1 + sovVpeApi(uint64(m.Count))
	}
	if m.PcapNameLength != 0 {
		n += 1 + sovVpeApi(uint64(m.PcapNameLength))
	}
	if len(m.PcapFileName) > 0 {
		for _, b := range m.PcapFileName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiPgCaptureReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiPgEnableDisableT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.IsEnabled != 0 {
		n += 1 + sovVpeApi(uint64(m.IsEnabled))
	}
	if m.StreamNameLength != 0 {
		n += 1 + sovVpeApi(uint64(m.StreamNameLength))
	}
	if len(m.StreamName) > 0 {
		for _, b := range m.StreamName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiPgEnableDisableReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.IsIpv6 != 0 {
		n += 1 + sovVpeApi(uint64(m.IsIpv6))
	}
	if m.IsAdd != 0 {
		n += 1 + sovVpeApi(uint64(m.IsAdd))
	}
	if m.MaskLength != 0 {
		n += 1 + sovVpeApi(uint64(m.MaskLength))
	}
	if len(m.Address) > 0 {
		for _, b := range m.Address {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if m.NumberOfRanges != 0 {
		n += 1 + sovVpeApi(uint64(m.NumberOfRanges))
	}
	if len(m.LowPorts) > 0 {
		l = 0
		for _, e := range m.LowPorts {
			l += sovVpeApi(uint64(e))
		}
		n += 1 + sovVpeApi(uint64(l)) + l
	}
	if len(m.HighPorts) > 0 {
		l = 0
		for _, e := range m.HighPorts {
			l += sovVpeApi(uint64(e))
		}
		n += 1 + sovVpeApi(uint64(l)) + l
	}
	if m.VrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.VrfId))
	}
	return n
}

func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.IsAdd != 0 {
		n += 1 + sovVpeApi(uint64(m.IsAdd))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.TcpInVrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.TcpInVrfId))
	}
	if m.TcpOutVrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.TcpOutVrfId))
	}
	if m.UdpInVrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.UdpInVrfId))
	}
	if m.UdpOutVrfId != 0 {
		n += 1 + sovVpeApi(uint64(m.UdpOutVrfId))
	}
	return n
}

func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiDeleteSubifT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	return n
}

func (m *CvlApiDeleteSubifReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiPuntT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.IsAdd != 0 {
		n += 1 + sovVpeApi(uint64(m.IsAdd))
	}
	if m.Ipv != 0 {
		n += 1 + sovVpeApi(uint64(m.Ipv))
	}
	if m.L4Protocol != 0 {
		n += 1 + sovVpeApi(uint64(m.L4Protocol))
	}
	if m.L4Port != 0 {
		n += 1 + sovVpeApi(uint64(m.L4Port))
	}
	return n
}

func (m *CvlApiPuntReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func (m *CvlApiFeatureEnableDisableT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.ClientIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.ClientIndex))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.SwIfIndex != 0 {
		n += 1 + sovVpeApi(uint64(m.SwIfIndex))
	}
	if m.Enable != 0 {
		n += 1 + sovVpeApi(uint64(m.Enable))
	}
	if len(m.ArcName) > 0 {
		for _, b := range m.ArcName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	if len(m.FeatureName) > 0 {
		for _, b := range m.FeatureName {
			l = len(b)
			n += 1 + l + sovVpeApi(uint64(l))
		}
	}
	return n
}

func (m *CvlApiFeatureEnableDisableReplyT) Size() (n int) {
	var l int
	_ = l
	if m.XVlMsgId != 0 {
		n += 1 + sovVpeApi(uint64(m.XVlMsgId))
	}
	if m.Context != 0 {
		n += 1 + sovVpeApi(uint64(m.Context))
	}
	if m.Retval != 0 {
		n += 1 + sozVpeApi(uint64(m.Retval))
	}
	return n
}

func sovVpeApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVpeApi(x uint64) (n int) {
	return sovVpeApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CvlApiCreateVlanSubifT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_create_vlan_subif_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_create_vlan_subif_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VlanId", wireType)
			}
			m.VlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VlanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCreateVlanSubifReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_create_vlan_subif_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_create_vlan_subif_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSwInterfaceSetMplsEnableT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_mpls_enable_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_mpls_enable_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			m.Enable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSwInterfaceSetMplsEnableReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_mpls_enable_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_mpls_enable_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiProxyArpAddDelT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_proxy_arp_add_del_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_proxy_arp_add_del_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			m.IsAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowAddress = append(m.LowAddress, make([]byte, postIndex-iNdEx))
			copy(m.LowAddress[len(m.LowAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HiAddress = append(m.HiAddress, make([]byte, postIndex-iNdEx))
			copy(m.HiAddress[len(m.HiAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiProxyArpAddDelReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_proxy_arp_add_del_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_proxy_arp_add_del_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiProxyArpIntfcEnableDisableT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_proxy_arp_intfc_enable_disable_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_proxy_arp_intfc_enable_disable_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisable", wireType)
			}
			m.EnableDisable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableDisable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiProxyArpIntfcEnableDisableReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_proxy_arp_intfc_enable_disable_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_proxy_arp_intfc_enable_disable_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiResetVrfT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_reset_vrf_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_reset_vrf_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIpv6", wireType)
			}
			m.IsIpv6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsIpv6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiResetVrfReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_reset_vrf_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_reset_vrf_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIsAddressReachableT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_is_address_reachable_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_is_address_reachable_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextHopSwIfIndex", wireType)
			}
			m.NextHopSwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextHopSwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKnown", wireType)
			}
			m.IsKnown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsKnown |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIpv6", wireType)
			}
			m.IsIpv6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsIpv6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsError", wireType)
			}
			m.IsError = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsError |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, make([]byte, postIndex-iNdEx))
			copy(m.Address[len(m.Address)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiWantStatsT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_want_stats_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_want_stats_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisable", wireType)
			}
			m.EnableDisable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableDisable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiWantStatsReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_want_stats_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_want_stats_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIp4FibCounterT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip4_fib_counter_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip4_fib_counter_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressLength", wireType)
			}
			m.AddressLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			m.Packets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiVnetIp4FibCountersT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_vnet_ip4_fib_counters_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_vnet_ip4_fib_counters_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.C = append(m.C, &CvlApiIp4FibCounterT{})
			if err := m.C[len(m.C)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIp4NbrCounterT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip4_nbr_counter_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip4_nbr_counter_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkType", wireType)
			}
			m.LinkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			m.Packets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiVnetIp4NbrCountersT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_vnet_ip4_nbr_counters_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_vnet_ip4_nbr_counters_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.C = append(m.C, &CvlApiIp4NbrCounterT{})
			if err := m.C[len(m.C)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIp6FibCounterT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip6_fib_counter_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip6_fib_counter_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Address = append(m.Address, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVpeApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVpeApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Address = append(m.Address, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressLength", wireType)
			}
			m.AddressLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			m.Packets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiVnetIp6FibCountersT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_vnet_ip6_fib_counters_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_vnet_ip6_fib_counters_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.C = append(m.C, &CvlApiIp6FibCounterT{})
			if err := m.C[len(m.C)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIp6NbrCounterT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip6_nbr_counter_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip6_nbr_counter_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Address = append(m.Address, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVpeApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVpeApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Address = append(m.Address, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkType", wireType)
			}
			m.LinkType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			m.Packets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packets |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiVnetIp6NbrCountersT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_vnet_ip6_nbr_counters_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_vnet_ip6_nbr_counters_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.C = append(m.C, &CvlApiIp6NbrCounterT{})
			if err := m.C[len(m.C)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiVnetGetSummaryStatsT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_vnet_get_summary_stats_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_vnet_get_summary_stats_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiVnetSummaryStatsReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_vnet_summary_stats_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_vnet_summary_stats_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TotalPkts = append(m.TotalPkts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVpeApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVpeApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TotalPkts = append(m.TotalPkts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPkts", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TotalBytes = append(m.TotalBytes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVpeApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVpeApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TotalBytes = append(m.TotalBytes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBytes", wireType)
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VectorRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.VectorRate = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiOamEventT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_oam_event_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_oam_event_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstAddress = append(m.DstAddress, make([]byte, postIndex-iNdEx))
			copy(m.DstAddress[len(m.DstAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiWantOamEventsT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_want_oam_events_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_want_oam_events_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisable", wireType)
			}
			m.EnableDisable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableDisable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiWantOamEventsReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_want_oam_events_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_want_oam_events_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiOamAddDelT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_oam_add_del_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_oam_add_del_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddress = append(m.SrcAddress, make([]byte, postIndex-iNdEx))
			copy(m.SrcAddress[len(m.SrcAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstAddress = append(m.DstAddress, make([]byte, postIndex-iNdEx))
			copy(m.DstAddress[len(m.DstAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			m.IsAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiOamAddDelReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_oam_add_del_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_oam_add_del_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiResetFibT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_reset_fib_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_reset_fib_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIpv6", wireType)
			}
			m.IsIpv6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsIpv6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiResetFibReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_reset_fib_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_reset_fib_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCreateLoopbackT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_create_loopback_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_create_loopback_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = append(m.MacAddress, make([]byte, postIndex-iNdEx))
			copy(m.MacAddress[len(m.MacAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCreateLoopbackReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_create_loopback_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_create_loopback_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCreateLoopbackInstanceT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_create_loopback_instance_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_create_loopback_instance_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = append(m.MacAddress, make([]byte, postIndex-iNdEx))
			copy(m.MacAddress[len(m.MacAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSpecified", wireType)
			}
			m.IsSpecified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSpecified |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInstance", wireType)
			}
			m.UserInstance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserInstance |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCreateLoopbackInstanceReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_create_loopback_instance_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_create_loopback_instance_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiDeleteLoopbackT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_delete_loopback_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_delete_loopback_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiDeleteLoopbackReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_delete_loopback_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_delete_loopback_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiControlPingT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_control_ping_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_control_ping_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiControlPingReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_control_ping_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_control_ping_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpePid", wireType)
			}
			m.VpePid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VpePid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCliRequestT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_cli_request_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_cli_request_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdInShmem", wireType)
			}
			m.CmdInShmem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdInShmem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCliInbandT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_cli_inband_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_cli_inband_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = append(m.Cmd, make([]byte, postIndex-iNdEx))
			copy(m.Cmd[len(m.Cmd)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCliReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_cli_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_cli_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyInShmem", wireType)
			}
			m.ReplyInShmem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyInShmem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCliInbandReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_cli_inband_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_cli_inband_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = append(m.Reply, make([]byte, postIndex-iNdEx))
			copy(m.Reply[len(m.Reply)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSetArpNeighborLimitT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_set_arp_neighbor_limit_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_set_arp_neighbor_limit_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIpv6", wireType)
			}
			m.IsIpv6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsIpv6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArpNeighborLimit", wireType)
			}
			m.ArpNeighborLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArpNeighborLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSetArpNeighborLimitReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_set_arp_neighbor_limit_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_set_arp_neighbor_limit_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiL2PatchAddDelT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_l2_patch_add_del_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_l2_patch_add_del_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxSwIfIndex", wireType)
			}
			m.RxSwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxSwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSwIfIndex", wireType)
			}
			m.TxSwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			m.IsAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiL2PatchAddDelReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_l2_patch_add_del_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_l2_patch_add_del_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSwInterfaceSetVpathT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_vpath_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_vpath_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			m.Enable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSwInterfaceSetVpathReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_vpath_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_vpath_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSwInterfaceSetL2XconnectT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_l2_xconnect_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_l2_xconnect_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxSwIfIndex", wireType)
			}
			m.RxSwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxSwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSwIfIndex", wireType)
			}
			m.TxSwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			m.Enable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSwInterfaceSetL2XconnectReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_l2_xconnect_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_l2_xconnect_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSwInterfaceSetL2BridgeT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_l2_bridge_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_l2_bridge_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxSwIfIndex", wireType)
			}
			m.RxSwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxSwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BdId", wireType)
			}
			m.BdId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BdId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shg", wireType)
			}
			m.Shg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shg |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvi", wireType)
			}
			m.Bvi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bvi |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			m.Enable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiSwInterfaceSetL2BridgeReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_l2_bridge_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_sw_interface_set_l2_bridge_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiBdIpMacAddDelT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_bd_ip_mac_add_del_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_bd_ip_mac_add_del_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BdId", wireType)
			}
			m.BdId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BdId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			m.IsAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIpv6", wireType)
			}
			m.IsIpv6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsIpv6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddress = append(m.IpAddress, make([]byte, postIndex-iNdEx))
			copy(m.IpAddress[len(m.IpAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MacAddress = append(m.MacAddress, make([]byte, postIndex-iNdEx))
			copy(m.MacAddress[len(m.MacAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiBdIpMacAddDelReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_bd_ip_mac_add_del_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_bd_ip_mac_add_del_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiClassifySetInterfaceIpTableT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_classify_set_interface_ip_table_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_classify_set_interface_ip_table_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIpv6", wireType)
			}
			m.IsIpv6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsIpv6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableIndex", wireType)
			}
			m.TableIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiClassifySetInterfaceIpTableReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_classify_set_interface_ip_table_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_classify_set_interface_ip_table_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiClassifySetInterfaceL2TablesT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_classify_set_interface_l2_tables_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_classify_set_interface_l2_tables_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip4TableIndex", wireType)
			}
			m.Ip4TableIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip4TableIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6TableIndex", wireType)
			}
			m.Ip6TableIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip6TableIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherTableIndex", wireType)
			}
			m.OtherTableIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherTableIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInput", wireType)
			}
			m.IsInput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsInput |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiClassifySetInterfaceL2TablesReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_classify_set_interface_l2_tables_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_classify_set_interface_l2_tables_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiGetNodeIndexT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_get_node_index_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_get_node_index_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = append(m.NodeName, make([]byte, postIndex-iNdEx))
			copy(m.NodeName[len(m.NodeName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiGetNodeIndexReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_get_node_index_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_get_node_index_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIndex", wireType)
			}
			m.NodeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiAddNodeNextT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_add_node_next_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_add_node_next_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = append(m.NodeName, make([]byte, postIndex-iNdEx))
			copy(m.NodeName[len(m.NodeName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextName = append(m.NextName, make([]byte, postIndex-iNdEx))
			copy(m.NextName[len(m.NextName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiAddNodeNextReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_add_node_next_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_add_node_next_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIndex", wireType)
			}
			m.NextIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiL2InterfaceEfpFilterT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_l2_interface_efp_filter_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_l2_interface_efp_filter_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisable", wireType)
			}
			m.EnableDisable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableDisable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiL2InterfaceEfpFilterReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_l2_interface_efp_filter_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_l2_interface_efp_filter_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCreateSubifT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_create_subif_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_create_subif_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubId", wireType)
			}
			m.SubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTags", wireType)
			}
			m.NoTags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoTags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneTag", wireType)
			}
			m.OneTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OneTag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwoTags", wireType)
			}
			m.TwoTags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwoTags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dot1Ad", wireType)
			}
			m.Dot1Ad = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dot1Ad |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExactMatch", wireType)
			}
			m.ExactMatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExactMatch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSub", wireType)
			}
			m.DefaultSub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultSub |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterVlanIdAny", wireType)
			}
			m.OuterVlanIdAny = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OuterVlanIdAny |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerVlanIdAny", wireType)
			}
			m.InnerVlanIdAny = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerVlanIdAny |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterVlanId", wireType)
			}
			m.OuterVlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OuterVlanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InnerVlanId", wireType)
			}
			m.InnerVlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InnerVlanId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiCreateSubifReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_create_subif_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_create_subif_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiShowVersionT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_show_version_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_show_version_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiShowVersionReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_show_version_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_show_version_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Program = append(m.Program, make([]byte, postIndex-iNdEx))
			copy(m.Program[len(m.Program)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version, make([]byte, postIndex-iNdEx))
			copy(m.Version[len(m.Version)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildDate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildDate = append(m.BuildDate, make([]byte, postIndex-iNdEx))
			copy(m.BuildDate[len(m.BuildDate)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildDirectory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildDirectory = append(m.BuildDirectory, make([]byte, postIndex-iNdEx))
			copy(m.BuildDirectory[len(m.BuildDirectory)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiInterfaceNameRenumberT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_interface_name_renumber_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_interface_name_renumber_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewShowDevInstance", wireType)
			}
			m.NewShowDevInstance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewShowDevInstance |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiInterfaceNameRenumberReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_interface_name_renumber_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_interface_name_renumber_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiWantIp4ArpEventsT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_want_ip4_arp_events_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_want_ip4_arp_events_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisable", wireType)
			}
			m.EnableDisable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableDisable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiWantIp4ArpEventsReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_want_ip4_arp_events_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_want_ip4_arp_events_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIp4ArpEventT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip4_arp_event_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip4_arp_event_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			m.Address = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Address |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMac", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMac = append(m.NewMac, make([]byte, postIndex-iNdEx))
			copy(m.NewMac[len(m.NewMac)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacIp", wireType)
			}
			m.MacIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacIp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiWantIp6NdEventsT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_want_ip6_nd_events_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_want_ip6_nd_events_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableDisable", wireType)
			}
			m.EnableDisable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableDisable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, make([]byte, postIndex-iNdEx))
			copy(m.Address[len(m.Address)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiWantIp6NdEventsReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_want_ip6_nd_events_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_want_ip6_nd_events_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIp6NdEventT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip6_nd_event_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip6_nd_event_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, make([]byte, postIndex-iNdEx))
			copy(m.Address[len(m.Address)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMac", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMac = append(m.NewMac, make([]byte, postIndex-iNdEx))
			copy(m.NewMac[len(m.NewMac)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MacIp", wireType)
			}
			m.MacIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MacIp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiInputAclSetInterfaceT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_input_acl_set_interface_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_input_acl_set_interface_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip4TableIndex", wireType)
			}
			m.Ip4TableIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip4TableIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip6TableIndex", wireType)
			}
			m.Ip6TableIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip6TableIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2TableIndex", wireType)
			}
			m.L2TableIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2TableIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			m.IsAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiInputAclSetInterfaceReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_input_acl_set_interface_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_input_acl_set_interface_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiGetNodeGraphT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_get_node_graph_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_get_node_graph_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiGetNodeGraphReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_get_node_graph_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_get_node_graph_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyInShmem", wireType)
			}
			m.ReplyInShmem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyInShmem |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIoamEnableT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ioam_enable_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ioam_enable_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			m.Seqno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seqno |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analyse", wireType)
			}
			m.Analyse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Analyse |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PotEnable", wireType)
			}
			m.PotEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PotEnable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceEnable", wireType)
			}
			m.TraceEnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TraceEnable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIoamEnableReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ioam_enable_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ioam_enable_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIoamDisableT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ioam_disable_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ioam_disable_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIoamDisableReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ioam_disable_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ioam_disable_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiGetNextIndexT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_get_next_index_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_get_next_index_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = append(m.NodeName, make([]byte, postIndex-iNdEx))
			copy(m.NodeName[len(m.NodeName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextName = append(m.NextName, make([]byte, postIndex-iNdEx))
			copy(m.NextName[len(m.NextName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiGetNextIndexReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_get_next_index_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_get_next_index_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIndex", wireType)
			}
			m.NextIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiPgCreateInterfaceT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_pg_create_interface_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_pg_create_interface_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceId", wireType)
			}
			m.InterfaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterfaceId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiPgCreateInterfaceReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_pg_create_interface_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_pg_create_interface_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiPgCaptureT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_pg_capture_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_pg_capture_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceId", wireType)
			}
			m.InterfaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterfaceId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			m.IsEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsEnabled |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcapNameLength", wireType)
			}
			m.PcapNameLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PcapNameLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PcapFileName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PcapFileName = append(m.PcapFileName, make([]byte, postIndex-iNdEx))
			copy(m.PcapFileName[len(m.PcapFileName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiPgCaptureReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_pg_capture_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_pg_capture_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiPgEnableDisableT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_pg_enable_disable_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_pg_enable_disable_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			m.IsEnabled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsEnabled |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamNameLength", wireType)
			}
			m.StreamNameLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamNameLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamName = append(m.StreamName, make([]byte, postIndex-iNdEx))
			copy(m.StreamName[len(m.StreamName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiPgEnableDisableReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_pg_enable_disable_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_pg_enable_disable_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIpSourceAndPortRangeCheckAddDelT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip_source_and_port_range_check_add_del_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip_source_and_port_range_check_add_del_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIpv6", wireType)
			}
			m.IsIpv6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsIpv6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			m.IsAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaskLength", wireType)
			}
			m.MaskLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaskLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, make([]byte, postIndex-iNdEx))
			copy(m.Address[len(m.Address)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfRanges", wireType)
			}
			m.NumberOfRanges = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfRanges |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LowPorts = append(m.LowPorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVpeApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVpeApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LowPorts = append(m.LowPorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LowPorts", wireType)
			}
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HighPorts = append(m.HighPorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVpeApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVpeApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HighPorts = append(m.HighPorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HighPorts", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfId", wireType)
			}
			m.VrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIpSourceAndPortRangeCheckAddDelReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip_source_and_port_range_check_add_del_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip_source_and_port_range_check_add_del_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip_source_and_port_range_check_interface_add_del_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip_source_and_port_range_check_interface_add_del_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			m.IsAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpInVrfId", wireType)
			}
			m.TcpInVrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpInVrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpOutVrfId", wireType)
			}
			m.TcpOutVrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpOutVrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpInVrfId", wireType)
			}
			m.UdpInVrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UdpInVrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UdpOutVrfId", wireType)
			}
			m.UdpOutVrfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UdpOutVrfId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiIpSourceAndPortRangeCheckInterfaceAddDelReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_ip_source_and_port_range_check_interface_add_del_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_ip_source_and_port_range_check_interface_add_del_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiDeleteSubifT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_delete_subif_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_delete_subif_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiDeleteSubifReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_delete_subif_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_delete_subif_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiPuntT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_punt_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_punt_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			m.IsAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv", wireType)
			}
			m.Ipv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ipv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L4Protocol", wireType)
			}
			m.L4Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L4Protocol |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L4Port", wireType)
			}
			m.L4Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L4Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiPuntReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_punt_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_punt_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiFeatureEnableDisableT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_feature_enable_disable_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_feature_enable_disable_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIndex", wireType)
			}
			m.ClientIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwIfIndex", wireType)
			}
			m.SwIfIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwIfIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			m.Enable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArcName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArcName = append(m.ArcName, make([]byte, postIndex-iNdEx))
			copy(m.ArcName[len(m.ArcName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVpeApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureName = append(m.FeatureName, make([]byte, postIndex-iNdEx))
			copy(m.FeatureName[len(m.FeatureName)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CvlApiFeatureEnableDisableReplyT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cvl_api_feature_enable_disable_reply_t: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cvl_api_feature_enable_disable_reply_t: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XVlMsgId", wireType)
			}
			m.XVlMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XVlMsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			m.Context = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Context |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Retval = v
		default:
			iNdEx = preIndex
			skippy, err := skipVpeApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVpeApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVpeApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVpeApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVpeApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVpeApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVpeApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVpeApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVpeApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVpeApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vpe.api.proto", fileDescriptorVpeApi) }

var fileDescriptorVpeApi = []byte{
	// 2899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x5c, 0x4d, 0x8c, 0x23, 0x47,
	0xf5, 0xff, 0xb7, 0x3d, 0xf6, 0xcc, 0x94, 0x67, 0x66, 0x37, 0xce, 0x66, 0xe3, 0x64, 0xbf, 0x7b,
	0xf7, 0x9f, 0x6c, 0xa2, 0x65, 0x20, 0xcb, 0xca, 0x07, 0x4e, 0x6c, 0xb4, 0x41, 0x8c, 0xc8, 0x26,
	0xab, 0xd9, 0x55, 0x0e, 0x5c, 0x5a, 0xed, 0xee, 0xb2, 0x5d, 0x4c, 0xbb, 0xbb, 0xb7, 0xbb, 0x6d,
	0xcf, 0x08, 0x10, 0x90, 0x0b, 0x12, 0x0a, 0x08, 0x12, 0x40, 0x01, 0x21, 0x71, 0x06, 0x89, 0x88,
	0x03, 0x17, 0x90, 0x38, 0xc1, 0x01, 0x09, 0x90, 0x72, 0x40, 0xe2, 0x84, 0xf8, 0x16, 0xe2, 0x02,
	0x12, 0x42, 0x9c, 0x38, 0xf0, 0x5e, 0x7d, 0xb8, 0xab, 0xdb, 0xf6, 0xcc, 0x2c, 0x52, 0xd9, 0x13,
	0x0e, 0xa3, 0x75, 0xbd, 0xaa, 0xee, 0x7a, 0xf5, 0xab, 0x57, 0xef, 0xb3, 0x7a, 0xc9, 0xe6, 0x28,
	0xa6, 0xdb, 0x6e, 0xcc, 0xb6, 0xe3, 0x24, 0xca, 0xa2, 0xe6, 0x4a, 0xd7, 0x67, 0x91, 0xfd, 0x7d,
	0x8b, 0x9c, 0xf3, 0x46, 0x81, 0x03, 0x74, 0xc7, 0x4b, 0xa8, 0x9b, 0x51, 0x67, 0x14, 0xb8, 0xa1,
	0x93, 0x0e, 0x3b, 0xac, 0xeb, 0x64, 0xcd, 0x73, 0x84, 0x00, 0xc1, 0x19, 0xa4, 0x3d, 0x87, 0xf9,
	0x2d, 0xeb, 0xb2, 0x75, 0xbd, 0xb6, 0xbb, 0x3a, 0x0a, 0xee, 0xa6, 0xbd, 0x1d, 0xbf, 0x79, 0x85,
	0x6c, 0x78, 0x01, 0xa3, 0x61, 0xe6, 0xb0, 0xd0, 0xa7, 0xfb, 0xad, 0x0a, 0xef, 0x6e, 0x08, 0xda,
	0x0e, 0x92, 0x9a, 0x2d, 0xb2, 0xea, 0x45, 0x61, 0x46, 0xf7, 0xb3, 0x56, 0x55, 0x3c, 0x2c, 0x9b,
	0xcd, 0x8b, 0xa4, 0x91, 0x8e, 0x1d, 0x98, 0x44, 0x3c, 0xbb, 0xc2, 0x7b, 0xd7, 0xd3, 0xf1, 0x4e,
	0x57, 0x3c, 0xf9, 0x24, 0x59, 0xe5, 0x9c, 0xc0, 0xb4, 0x35, 0xde, 0x57, 0xc7, 0xe6, 0x8e, 0x6f,
	0xbf, 0x69, 0x91, 0x2b, 0xf3, 0x59, 0x4e, 0x68, 0x1c, 0x1c, 0x1c, 0xc5, 0xb8, 0xc6, 0x55, 0xa5,
	0xc8, 0xd5, 0x59, 0x52, 0x4f, 0x68, 0x36, 0x72, 0x03, 0xce, 0xee, 0x63, 0xbb, 0xb2, 0x75, 0x14,
	0xb7, 0xf6, 0x8f, 0x2c, 0xf2, 0x8c, 0x62, 0x0a, 0x07, 0xc2, 0xdb, 0x92, 0xae, 0xeb, 0x51, 0x27,
	0xa5, 0x99, 0x33, 0x88, 0x83, 0xd4, 0xa1, 0xa1, 0xdb, 0x09, 0xe8, 0x52, 0x21, 0x85, 0xc5, 0x09,
	0x2e, 0x14, 0xa2, 0xa2, 0x65, 0x7f, 0x9a, 0xdc, 0x38, 0x16, 0xef, 0x66, 0xb0, 0xb5, 0xff, 0xac,
	0xc9, 0x20, 0xc8, 0xe6, 0xfe, 0x81, 0xe3, 0x26, 0xb1, 0xe3, 0xfa, 0xbe, 0xe3, 0xd3, 0xc0, 0x28,
	0x60, 0x4f, 0x90, 0xfa, 0x28, 0xe9, 0xe2, 0x5b, 0x05, 0x56, 0x35, 0x68, 0xc1, 0x3b, 0x81, 0xcc,
	0x52, 0x64, 0x40, 0xe2, 0x54, 0x63, 0xe9, 0x6d, 0xdf, 0x6f, 0x5e, 0x22, 0x8d, 0x20, 0x1a, 0x23,
	0x3d, 0xa1, 0x69, 0xda, 0xaa, 0x5f, 0xae, 0x5e, 0xdf, 0xd8, 0x25, 0x40, 0xba, 0x2d, 0x28, 0xcd,
	0x0b, 0x84, 0xf4, 0xd9, 0xa4, 0x7f, 0x95, 0xf7, 0xaf, 0xf7, 0x99, 0xec, 0xb6, 0x93, 0x5c, 0x6e,
	0xa7, 0x97, 0x69, 0x08, 0xdb, 0x9f, 0x5b, 0xe4, 0xfa, 0xf4, 0xa4, 0xb0, 0xc5, 0x5d, 0x4f, 0xed,
	0xaa, 0xcf, 0xd2, 0xa5, 0x4b, 0xe6, 0xff, 0x93, 0xad, 0x22, 0x37, 0x12, 0xf9, 0x4d, 0x41, 0xbd,
	0x23, 0x88, 0xf6, 0x67, 0xc8, 0xf6, 0x31, 0x17, 0x63, 0x08, 0xce, 0x6f, 0x5b, 0xe4, 0x71, 0xc5,
	0x01, 0xec, 0x29, 0x9c, 0x0f, 0x94, 0x1f, 0x93, 0xc8, 0x81, 0x1a, 0x04, 0x59, 0x64, 0xf1, 0xa8,
	0x2d, 0x51, 0x03, 0xd1, 0xdc, 0x81, 0x96, 0x26, 0xbb, 0x35, 0x4d, 0x76, 0xed, 0x4f, 0x90, 0xa7,
	0xa6, 0x19, 0x34, 0x84, 0xc6, 0x5b, 0x15, 0x72, 0x51, 0x4d, 0x26, 0x0e, 0x0c, 0xca, 0x39, 0xcc,
	0xe6, 0x7a, 0x7d, 0xe3, 0x22, 0xb5, 0x4d, 0xce, 0x84, 0xf0, 0xaf, 0xd3, 0x8f, 0x62, 0x67, 0x5a,
	0xb6, 0x4e, 0x63, 0xdf, 0x47, 0xa3, 0xf8, 0xfe, 0x44, 0xc4, 0x9e, 0x22, 0x6b, 0xc0, 0xe3, 0x5e,
	0x18, 0x8d, 0x43, 0x89, 0x18, 0x00, 0xfb, 0x31, 0x6c, 0xea, 0x18, 0xd7, 0x0b, 0x18, 0x8b, 0x67,
	0x68, 0x92, 0x44, 0x09, 0x1c, 0x67, 0xf9, 0xcc, 0x4b, 0xd8, 0x44, 0xc6, 0xd4, 0x41, 0x5f, 0xe3,
	0x07, 0x5d, 0x35, 0xed, 0xef, 0x58, 0xe4, 0x8c, 0x42, 0x65, 0xec, 0xc2, 0xe2, 0xd2, 0xcc, 0xcd,
	0x52, 0xa3, 0x58, 0x4c, 0x1f, 0x9f, 0x95, 0x19, 0xc7, 0xa7, 0x79, 0x9a, 0x54, 0xe3, 0x89, 0xbc,
	0xe0, 0x4f, 0x7b, 0x8f, 0x3c, 0x3d, 0x83, 0x55, 0x43, 0xe2, 0xf2, 0x86, 0x95, 0xcb, 0x26, 0x8b,
	0x6f, 0x39, 0x5d, 0xd6, 0x71, 0xbc, 0x68, 0x88, 0xe6, 0x06, 0x26, 0xd3, 0x00, 0x95, 0x33, 0xc9,
	0x26, 0xae, 0x4e, 0x89, 0x56, 0x40, 0xc3, 0x5e, 0xd6, 0x97, 0x13, 0x6e, 0x4a, 0xea, 0xcb, 0x9c,
	0x88, 0x2f, 0x88, 0x5d, 0x6f, 0x8f, 0x66, 0x29, 0x9f, 0xb7, 0xba, 0xab, 0x9a, 0xcd, 0x33, 0xa4,
	0xd6, 0x39, 0xc8, 0x68, 0xca, 0x51, 0xa9, 0xee, 0x8a, 0x86, 0xfd, 0x4d, 0x8b, 0x5c, 0x52, 0xec,
	0x8c, 0x42, 0x38, 0x29, 0x25, 0x9e, 0x8e, 0xdc, 0xb2, 0xfc, 0x04, 0x56, 0x74, 0xeb, 0x01, 0xb3,
	0xf1, 0x37, 0xc8, 0x4d, 0x12, 0x8d, 0xe6, 0xfb, 0x88, 0xe5, 0xc1, 0xfc, 0xd5, 0xeb, 0x8d, 0x9b,
	0x97, 0xb6, 0xd1, 0xf5, 0xda, 0x9e, 0x0b, 0xc5, 0xae, 0xe5, 0xd9, 0xaf, 0x97, 0xb0, 0x0a, 0x3b,
	0xc9, 0xb1, 0xb0, 0x3a, 0x47, 0xd6, 0x03, 0x16, 0xee, 0x39, 0xd9, 0x41, 0x4c, 0x25, 0x5b, 0x6b,
	0x48, 0x78, 0x00, 0xed, 0x47, 0x46, 0xe8, 0x87, 0xb3, 0x10, 0xd2, 0x38, 0x39, 0x12, 0xa1, 0x09,
	0x14, 0x15, 0x1d, 0x8a, 0x92, 0x31, 0xa8, 0x96, 0x8d, 0x01, 0x32, 0x43, 0x7b, 0x2c, 0x54, 0x46,
	0x99, 0x37, 0x04, 0x80, 0xb5, 0x79, 0x00, 0x16, 0xf0, 0x41, 0x00, 0x8b, 0xc2, 0xd6, 0x3e, 0x4c,
	0xd8, 0xaa, 0x88, 0xc4, 0xe2, 0x85, 0xad, 0xbd, 0x1c, 0x61, 0x6b, 0x1f, 0x25, 0x6c, 0xed, 0xc3,
	0x84, 0xad, 0x80, 0x95, 0x69, 0x61, 0x6b, 0x9f, 0x48, 0x61, 0x6b, 0x4f, 0x0b, 0xdb, 0xa7, 0xc8,
	0xe5, 0x02, 0xeb, 0x3d, 0xf8, 0x4b, 0x87, 0x83, 0x81, 0x9b, 0x1c, 0x98, 0xd7, 0xfe, 0xf6, 0xaf,
	0x2c, 0x62, 0x17, 0xa6, 0x2f, 0x4e, 0x6d, 0x28, 0x22, 0x02, 0x67, 0x37, 0x8b, 0x32, 0x37, 0x70,
	0xe2, 0xbd, 0x2c, 0xe5, 0xc2, 0x56, 0xdd, 0x5d, 0xe7, 0x94, 0x7b, 0x40, 0x40, 0x67, 0x59, 0x74,
	0x8b, 0xad, 0xae, 0xf1, 0x7e, 0xf1, 0xc4, 0x8b, 0x48, 0xc1, 0x01, 0x23, 0xea, 0x65, 0x51, 0xe2,
	0x24, 0x10, 0xc2, 0x71, 0xc3, 0x6b, 0xed, 0x12, 0x41, 0xda, 0x05, 0x8a, 0xcd, 0x72, 0x57, 0x2b,
	0x72, 0x07, 0x0e, 0x1d, 0x21, 0x3c, 0x47, 0x2c, 0x03, 0x5e, 0xea, 0xa7, 0xd9, 0xc4, 0x05, 0xaf,
	0x08, 0x17, 0x1d, 0x48, 0xca, 0x45, 0x87, 0xed, 0x46, 0x54, 0xa8, 0x3a, 0x2f, 0xbc, 0x61, 0xbf,
	0xa3, 0x1d, 0x00, 0x6e, 0x07, 0x27, 0x13, 0x9e, 0x50, 0xbb, 0x1d, 0xe7, 0x67, 0xa5, 0xcc, 0xaf,
	0x21, 0xe3, 0xfd, 0x7b, 0x8b, 0x3c, 0xa1, 0x6f, 0xc7, 0x12, 0xc3, 0x33, 0xd8, 0xe4, 0x34, 0xf1,
	0x26, 0x9b, 0x5c, 0x13, 0x9b, 0x0c, 0x24, 0xb5, 0xc9, 0x25, 0x29, 0xa8, 0x4f, 0x49, 0x41, 0x1e,
	0xe0, 0xad, 0x6a, 0x01, 0x9e, 0x1d, 0xe4, 0x71, 0xa8, 0xbe, 0xc4, 0x85, 0xc5, 0x12, 0xa8, 0x98,
	0x97, 0x80, 0xa7, 0xe6, 0xfe, 0xd6, 0x74, 0xf7, 0x77, 0x3a, 0x96, 0x40, 0x06, 0x0d, 0xa1, 0xf1,
	0x75, 0xed, 0x08, 0xca, 0xac, 0x4e, 0x10, 0x45, 0x71, 0x07, 0x6c, 0x86, 0x51, 0x4c, 0x40, 0x56,
	0x06, 0x6e, 0x2e, 0x4c, 0x2b, 0x42, 0x56, 0x80, 0xa4, 0xa2, 0xf6, 0x2f, 0x6b, 0x76, 0xa9, 0xcc,
	0xd8, 0x92, 0x92, 0x4d, 0x7f, 0xd1, 0x14, 0x7e, 0x99, 0x25, 0x16, 0x82, 0x4a, 0x0b, 0x3d, 0xba,
	0x54, 0xd0, 0xf0, 0xed, 0x20, 0x52, 0x69, 0x4c, 0x3d, 0xd6, 0x65, 0x54, 0xa9, 0xae, 0x06, 0x4b,
	0xef, 0x2b, 0x52, 0xf3, 0x2a, 0xd9, 0x1c, 0xa6, 0x60, 0x40, 0x15, 0xc3, 0x32, 0xf4, 0xda, 0x40,
	0xe2, 0x8e, 0xa4, 0xd9, 0xdf, 0xd0, 0xd2, 0x17, 0x73, 0x57, 0xba, 0xa4, 0x5d, 0xf8, 0x9a, 0x26,
	0xb1, 0xa0, 0x26, 0xe8, 0xa2, 0x24, 0xf6, 0x28, 0xbe, 0x34, 0xdb, 0x50, 0x66, 0xcb, 0xd0, 0xd9,
	0x4d, 0xc8, 0xd9, 0xc9, 0x26, 0xc1, 0xd0, 0x24, 0x02, 0xa7, 0x80, 0x85, 0x3d, 0xa3, 0x4e, 0x0f,
	0x44, 0xd9, 0xe7, 0x67, 0x4e, 0x6a, 0x48, 0x1a, 0xca, 0xcc, 0xae, 0x4c, 0x33, 0x8b, 0x19, 0xeb,
	0x98, 0x3a, 0xb1, 0x96, 0xb1, 0x8e, 0xe9, 0x3d, 0xb0, 0xd6, 0x6f, 0x69, 0xb6, 0x13, 0x1e, 0x00,
	0x16, 0x1f, 0x0e, 0x69, 0x9a, 0x19, 0x95, 0x92, 0xcb, 0xf0, 0xf0, 0xc0, 0x87, 0x27, 0x9d, 0xb4,
	0x3f, 0xa0, 0x03, 0xe9, 0x6b, 0x13, 0xa0, 0xed, 0x84, 0xf7, 0x91, 0x82, 0x21, 0xc9, 0x19, 0x9d,
	0x2b, 0x16, 0x76, 0xdc, 0xd0, 0x37, 0xca, 0x14, 0x80, 0x2b, 0x83, 0x2a, 0x99, 0xcb, 0x12, 0x2d,
	0x74, 0x70, 0x80, 0x31, 0x69, 0xc9, 0xf1, 0xa7, 0xfd, 0x05, 0xcd, 0x38, 0x0a, 0xc8, 0x8c, 0xec,
	0xea, 0x35, 0xb2, 0x25, 0xde, 0x5c, 0xc2, 0x69, 0x83, 0x53, 0x15, 0x52, 0xa0, 0x85, 0x9e, 0x9e,
	0x81, 0x94, 0x21, 0x9e, 0xe6, 0x81, 0x04, 0xae, 0x2b, 0x9f, 0x51, 0xc2, 0x24, 0x1a, 0xf6, 0x4f,
	0xac, 0x3c, 0xf6, 0x40, 0x13, 0x8d, 0x19, 0xd1, 0x90, 0xb2, 0x5e, 0xbf, 0x03, 0x9e, 0x75, 0xc0,
	0x06, 0x2c, 0x5b, 0x4e, 0x7a, 0xf2, 0x06, 0x69, 0x4e, 0xb3, 0x22, 0xcf, 0xc5, 0x69, 0xe8, 0x79,
	0x45, 0x76, 0xbc, 0x8c, 0x74, 0x7b, 0xac, 0x55, 0x4f, 0x66, 0x2f, 0xc2, 0x90, 0xea, 0xfa, 0xb5,
	0xb6, 0xb5, 0xc1, 0x4d, 0x27, 0x76, 0x33, 0xaf, 0xbf, 0x10, 0xdf, 0xf6, 0x2a, 0x48, 0xde, 0xfe,
	0x8c, 0xc4, 0x65, 0x23, 0xd9, 0xcf, 0x73, 0x96, 0x30, 0x28, 0x2b, 0x0e, 0x92, 0x86, 0x34, 0xd3,
	0x06, 0xe5, 0xce, 0x6c, 0x5d, 0x77, 0x66, 0x1f, 0xe6, 0x72, 0x31, 0xb5, 0x30, 0x43, 0x60, 0xfe,
	0x40, 0x97, 0xc5, 0x72, 0x21, 0x69, 0x04, 0x2c, 0xf4, 0x4f, 0x64, 0xf9, 0x6b, 0x7c, 0x48, 0xe9,
	0x4e, 0x70, 0x6d, 0x08, 0xaf, 0x3f, 0x1d, 0x56, 0x34, 0x84, 0x4d, 0xdb, 0x87, 0x17, 0x84, 0x10,
	0x10, 0xbf, 0x47, 0x04, 0x31, 0xc7, 0xb7, 0x7e, 0xec, 0xf2, 0xa2, 0xbe, 0x4a, 0x43, 0x28, 0xff,
	0xcb, 0x22, 0xd7, 0x0e, 0x9b, 0xbf, 0x93, 0x30, 0xbf, 0x47, 0x97, 0x8f, 0xf1, 0xe3, 0xa4, 0xd6,
	0xf1, 0xf3, 0x7a, 0xce, 0x4a, 0xc7, 0x87, 0x69, 0xc1, 0x32, 0xa6, 0xfd, 0x9e, 0x04, 0x14, 0x7f,
	0x22, 0xa5, 0x33, 0x62, 0x32, 0x70, 0xc5, 0x9f, 0x1a, 0xee, 0x6b, 0x05, 0xdc, 0x3f, 0x49, 0x9e,
	0x3f, 0xc6, 0xba, 0x0d, 0xa1, 0xfe, 0x6f, 0xad, 0xa8, 0x8b, 0xcb, 0x8a, 0x1d, 0x19, 0x31, 0x18,
	0xd7, 0xac, 0x13, 0x1c, 0x57, 0x34, 0x1c, 0xe7, 0x94, 0x74, 0xe7, 0x56, 0x7e, 0x2e, 0x10, 0xc2,
	0xe2, 0x72, 0x29, 0x97, 0xc5, 0x5a, 0x86, 0x41, 0x0f, 0x80, 0xd6, 0xa6, 0xa2, 0x46, 0xad, 0xd6,
	0x3b, 0xbd, 0x7a, 0x43, 0x90, 0xff, 0xd6, 0x22, 0xcf, 0xe5, 0x6e, 0x8a, 0x9b, 0xa6, 0xac, 0x7b,
	0xc0, 0x37, 0x3b, 0xdf, 0x7a, 0x60, 0x24, 0x33, 0x5e, 0x99, 0x9b, 0xeb, 0x13, 0x94, 0x14, 0x74,
	0xad, 0xac, 0xa0, 0x31, 0x67, 0xc8, 0xb9, 0x13, 0xfd, 0x62, 0x47, 0x08, 0x27, 0x89, 0xd0, 0xe6,
	0xb3, 0x16, 0x79, 0xff, 0x71, 0x57, 0x68, 0x08, 0xe4, 0x1f, 0x57, 0xf2, 0x53, 0x35, 0x87, 0x05,
	0x38, 0x5b, 0x9c, 0x85, 0x74, 0xa9, 0xd6, 0xee, 0x19, 0x72, 0x0a, 0x0b, 0x23, 0x3a, 0xa0, 0xb2,
	0xa6, 0x0e, 0xe4, 0x07, 0x13, 0x4c, 0xc5, 0xb8, 0xb6, 0x33, 0x0d, 0x3c, 0x8c, 0x6b, 0x6b, 0xe3,
	0x9e, 0x27, 0x8f, 0x45, 0x59, 0x1f, 0x33, 0xde, 0xda, 0x48, 0xa1, 0x85, 0x4e, 0xf1, 0x0e, 0x6d,
	0xac, 0xa8, 0x9b, 0xb2, 0x30, 0x1e, 0x66, 0x52, 0x27, 0x81, 0x44, 0xec, 0x60, 0xd3, 0xfe, 0x9c,
	0x45, 0x3e, 0x70, 0x6c, 0xfc, 0x0c, 0xed, 0xe1, 0x57, 0x2c, 0xd2, 0x52, 0x3c, 0x60, 0xaa, 0x3e,
	0x8c, 0x7c, 0xb9, 0x20, 0xa3, 0x3b, 0x76, 0x8e, 0xac, 0xf3, 0x99, 0x42, 0x77, 0x40, 0x65, 0xce,
	0x64, 0x0d, 0x09, 0xaf, 0x40, 0xdb, 0xfe, 0x92, 0x95, 0xd7, 0xd2, 0x4b, 0x3c, 0x99, 0x4b, 0xe0,
	0xe7, 0x93, 0x28, 0xf9, 0x41, 0x8a, 0x38, 0x6b, 0xdf, 0xb3, 0xc8, 0x93, 0x8a, 0x21, 0x54, 0x5c,
	0x82, 0x75, 0xac, 0xb8, 0x2f, 0x0b, 0x23, 0xde, 0x89, 0x0c, 0xf0, 0xce, 0x9a, 0xec, 0x04, 0x02,
	0x07, 0xf0, 0x8b, 0x16, 0xb9, 0x30, 0x9b, 0x5f, 0x83, 0xf8, 0xe1, 0xeb, 0x8b, 0xf8, 0x01, 0x45,
	0xe0, 0xf7, 0x53, 0xed, 0x9a, 0x1a, 0x48, 0x74, 0x2e, 0xde, 0xb4, 0x1b, 0x3b, 0x5d, 0x16, 0x88,
	0xe2, 0xda, 0x89, 0xbf, 0x72, 0xb3, 0x4f, 0x9e, 0x3d, 0x6a, 0x15, 0x86, 0x4e, 0xe9, 0xdf, 0xaa,
	0x5a, 0x5a, 0x49, 0xe4, 0xfe, 0x96, 0x7f, 0x2b, 0x11, 0xfc, 0x08, 0x60, 0x42, 0xbb, 0x75, 0x03,
	0x2d, 0x91, 0x42, 0x0f, 0x23, 0xd0, 0x5a, 0xbd, 0x54, 0xf9, 0x11, 0x61, 0xf4, 0x00, 0x5a, 0xd8,
	0x11, 0x85, 0x14, 0x7b, 0xa4, 0xae, 0xac, 0x43, 0x13, 0x7a, 0x50, 0x45, 0x66, 0x63, 0xf9, 0x88,
	0x54, 0x91, 0xd0, 0xe6, 0xcf, 0x00, 0x20, 0x7e, 0x94, 0xbd, 0xe0, 0xfa, 0xad, 0x75, 0xf1, 0x88,
	0x68, 0xa1, 0x79, 0xa4, 0xfb, 0x2e, 0x38, 0xca, 0x03, 0x0c, 0xe6, 0x5a, 0x44, 0x98, 0x47, 0x4e,
	0xba, 0x8b, 0x14, 0x5e, 0xf7, 0xa0, 0x5d, 0x77, 0x18, 0x60, 0x09, 0xb0, 0xd3, 0x6a, 0x88, 0x01,
	0x92, 0x74, 0x7f, 0xd8, 0x69, 0x3e, 0x07, 0x3a, 0x7c, 0x88, 0x5b, 0x26, 0x6f, 0x56, 0x3a, 0x6e,
	0x78, 0xd0, 0xda, 0xe0, 0xc3, 0xb6, 0x78, 0xc7, 0x6b, 0xfc, 0x8a, 0xe5, 0xed, 0xf0, 0x00, 0x87,
	0x32, 0x70, 0xcb, 0x8b, 0x43, 0x37, 0xc5, 0x50, 0xde, 0x91, 0x0f, 0xb5, 0xc9, 0x66, 0xe1, 0xad,
	0xad, 0x2d, 0x81, 0xb8, 0xf6, 0x46, 0x1c, 0x53, 0x78, 0x5d, 0xeb, 0x94, 0xcc, 0x08, 0xe7, 0xaf,
	0xc2, 0x13, 0x7c, 0x7e, 0xe6, 0x86, 0x2f, 0x29, 0xc1, 0xab, 0xa5, 0x35, 0xd3, 0x7e, 0x34, 0x76,
	0x46, 0x34, 0x49, 0x59, 0x14, 0x1a, 0x4d, 0x6b, 0xfe, 0x55, 0xc3, 0xa0, 0x30, 0xa9, 0x21, 0x0c,
	0xb0, 0x4a, 0x9f, 0x44, 0xbd, 0xc4, 0x1d, 0x48, 0x6d, 0xab, 0x9a, 0xd8, 0x23, 0xe7, 0x96, 0xaa,
	0x56, 0x35, 0x51, 0xf1, 0x75, 0x86, 0x2c, 0x00, 0x5f, 0x56, 0x14, 0x6e, 0xb9, 0x6f, 0xcc, 0x29,
	0x77, 0x80, 0xd0, 0x7c, 0x96, 0x9c, 0x92, 0xdd, 0x2c, 0xe1, 0xd5, 0xdc, 0x03, 0xe9, 0x3f, 0x6f,
	0x89, 0x31, 0x8a, 0x6a, 0xbf, 0xab, 0x69, 0xc8, 0x5c, 0xb1, 0xa0, 0x72, 0x87, 0xd5, 0x86, 0xc3,
	0x41, 0x67, 0xc9, 0x1a, 0xf2, 0x05, 0xf2, 0x44, 0x48, 0xc7, 0x62, 0x1b, 0x7c, 0x3a, 0xca, 0x2b,
	0x15, 0xe2, 0xe8, 0x37, 0xa1, 0xf3, 0x3e, 0xf4, 0xdd, 0xa1, 0xa3, 0x49, 0xbd, 0x42, 0xd3, 0x96,
	0xf3, 0x56, 0x64, 0x48, 0x5b, 0xfe, 0x42, 0x33, 0x7f, 0xbc, 0x24, 0x8c, 0xce, 0x1f, 0xe6, 0xd1,
	0x4e, 0x70, 0x19, 0x5b, 0xbf, 0x5a, 0x52, 0x2f, 0xdc, 0x63, 0xb2, 0x33, 0x72, 0xf5, 0xb0, 0xd5,
	0x18, 0x02, 0xf1, 0xef, 0x9a, 0xcf, 0x53, 0x98, 0xd1, 0x28, 0x7c, 0x1a, 0x0a, 0x2b, 0xc5, 0xdb,
	0x5c, 0xd3, 0x88, 0x95, 0x64, 0xb6, 0x3e, 0xe3, 0xd6, 0x3c, 0xca, 0x2c, 0x44, 0x9b, 0xf2, 0xd0,
	0xd5, 0xa1, 0x79, 0xd7, 0xf5, 0xd0, 0x70, 0x61, 0x08, 0xca, 0x62, 0x69, 0x6d, 0x6a, 0xd0, 0xda,
	0x89, 0xf1, 0x7e, 0xf0, 0xf9, 0x12, 0xd0, 0x6d, 0x27, 0xf4, 0xdf, 0x3b, 0x52, 0x53, 0xb8, 0x7a,
	0x99, 0xe6, 0x75, 0xd1, 0x19, 0x8b, 0x31, 0xe5, 0xa7, 0x58, 0xb9, 0x9d, 0xd0, 0x27, 0x34, 0x0a,
	0x9e, 0x44, 0x65, 0x65, 0xae, 0x64, 0x4c, 0x05, 0xd7, 0x73, 0x51, 0x7b, 0x64, 0x99, 0xf9, 0x6e,
	0x45, 0xd7, 0xdb, 0x10, 0xd4, 0x39, 0xae, 0x17, 0x94, 0x62, 0xb8, 0xff, 0xa5, 0xc8, 0xf7, 0x1a,
	0xd9, 0x52, 0x21, 0x69, 0x21, 0xec, 0xdd, 0x08, 0x6e, 0x6a, 0xa3, 0xf2, 0x0c, 0xd3, 0x9a, 0x9e,
	0x86, 0x2f, 0x58, 0x84, 0xd9, 0x58, 0x19, 0x92, 0xcb, 0x6c, 0x46, 0x90, 0x0b, 0x96, 0x3d, 0x36,
	0x9a, 0x84, 0xc7, 0xaa, 0xf8, 0xc5, 0x39, 0xd3, 0x2e, 0xb5, 0x86, 0xf7, 0x46, 0x25, 0xaf, 0xc1,
	0x32, 0x7e, 0x5d, 0xca, 0xfc, 0xf7, 0x38, 0x5b, 0xa4, 0x32, 0x39, 0xa3, 0xf0, 0x8b, 0x5f, 0x3e,
	0xa3, 0x0f, 0xc3, 0x68, 0x12, 0x3b, 0x60, 0x83, 0x1f, 0xcc, 0xd0, 0x0d, 0x0e, 0x52, 0x3a, 0x31,
	0x82, 0xa2, 0x89, 0x8e, 0x56, 0x1c, 0x65, 0x92, 0x53, 0x29, 0x74, 0xeb, 0x40, 0x79, 0x89, 0x13,
	0x90, 0xb7, 0x2c, 0xe1, 0xb1, 0x98, 0x9e, 0xfd, 0x6d, 0x70, 0x9a, 0x1c, 0xc2, 0xe3, 0x12, 0x8c,
	0xf1, 0x27, 0xb1, 0x04, 0x0f, 0xf0, 0x0b, 0x57, 0x9d, 0x74, 0x34, 0x0c, 0x89, 0xe2, 0xeb, 0xba,
	0x8a, 0xc4, 0xe9, 0x16, 0xf1, 0xcd, 0x49, 0x09, 0x7d, 0x7b, 0x90, 0x5b, 0xba, 0x02, 0x0f, 0x86,
	0xd6, 0xfc, 0x4e, 0x39, 0xc9, 0x34, 0xc9, 0x15, 0x9c, 0xd0, 0x04, 0xca, 0x54, 0x06, 0x2a, 0x67,
	0x78, 0x39, 0x19, 0x94, 0x6f, 0x69, 0x2e, 0x6d, 0xdc, 0x53, 0x21, 0xe1, 0x62, 0x6c, 0x0c, 0x5e,
	0x60, 0xca, 0x73, 0xca, 0x4a, 0x8c, 0x1a, 0x13, 0x1a, 0x1c, 0xa1, 0xaf, 0x5a, 0xb9, 0x8f, 0x3a,
	0x8b, 0xbd, 0x25, 0x45, 0xad, 0x6f, 0x57, 0xf2, 0x6b, 0x1d, 0xc8, 0x96, 0x1b, 0x67, 0xc3, 0x64,
	0xd9, 0x60, 0xf1, 0x7a, 0x8a, 0xfa, 0x8e, 0x50, 0x39, 0x73, 0xeb, 0x2c, 0x15, 0x6a, 0x4a, 0xbb,
	0xbb, 0x5d, 0xd7, 0xef, 0x6e, 0x5f, 0x27, 0xa7, 0x63, 0xe0, 0x5f, 0x04, 0x50, 0xf2, 0x4e, 0x84,
	0xd0, 0x82, 0x5b, 0x48, 0x47, 0xa9, 0x95, 0xd7, 0xf1, 0xc1, 0x06, 0xf0, 0x91, 0x5d, 0x16, 0x48,
	0xd1, 0x17, 0x25, 0x99, 0x0d, 0xa4, 0x7e, 0x04, 0x88, 0x5c, 0xc2, 0xb5, 0xaf, 0x5d, 0x34, 0x64,
	0x16, 0xf1, 0x55, 0x63, 0x6f, 0x91, 0x1f, 0xdb, 0x15, 0xb1, 0x5e, 0x29, 0x63, 0x7d, 0x83, 0x34,
	0xd3, 0x0c, 0x84, 0x75, 0x50, 0xc0, 0x55, 0xde, 0xcc, 0x10, 0x3d, 0x1a, 0xb2, 0x78, 0xd9, 0x36,
	0x1f, 0xad, 0xee, 0xd2, 0xe6, 0xc3, 0x0a, 0x5f, 0x35, 0xf6, 0x16, 0xf4, 0x19, 0xde, 0x3f, 0x2b,
	0x79, 0x11, 0x81, 0xc5, 0x4e, 0x1a, 0x0d, 0x13, 0x90, 0x3c, 0xbc, 0x93, 0x13, 0x47, 0x49, 0xe6,
	0x24, 0x6e, 0xd8, 0xa3, 0x8e, 0xd7, 0xa7, 0xde, 0xde, 0x42, 0x2a, 0x8e, 0x87, 0x7d, 0xa3, 0x37,
	0xe7, 0x43, 0xd2, 0x81, 0x9b, 0xee, 0x29, 0xe8, 0x65, 0x9d, 0x0b, 0x49, 0xf9, 0xd7, 0x25, 0xc5,
	0xd2, 0xe3, 0xc4, 0x57, 0x87, 0x23, 0x21, 0xf3, 0x08, 0x51, 0x57, 0xac, 0x53, 0xa5, 0x0f, 0xb7,
	0x04, 0xfd, 0xd5, 0xee, 0x2e, 0xa7, 0xf2, 0x8f, 0x33, 0xa2, 0x31, 0x07, 0x24, 0x05, 0xe3, 0x5f,
	0xe5, 0x1f, 0x67, 0x44, 0xe3, 0x7b, 0xd8, 0x16, 0x5f, 0xaa, 0xf6, 0xfa, 0xb2, 0x97, 0xf0, 0xde,
	0x75, 0xa4, 0x88, 0xee, 0xfc, 0xa2, 0x70, 0x43, 0xff, 0xb6, 0xf0, 0xf3, 0x16, 0x69, 0x3f, 0x22,
	0xec, 0x86, 0x04, 0xe0, 0x37, 0x15, 0xf2, 0xa1, 0x63, 0x72, 0x92, 0x6b, 0xa6, 0x05, 0x5d, 0x59,
	0x97, 0x3b, 0xbe, 0xa2, 0xef, 0xf8, 0x51, 0xc1, 0xd9, 0x15, 0xb2, 0x99, 0x79, 0xf8, 0x29, 0xab,
	0x23, 0x71, 0x57, 0xb5, 0x4f, 0x2f, 0xde, 0x09, 0x5f, 0xe3, 0xb7, 0xb4, 0xf1, 0x0a, 0x06, 0x0c,
	0x89, 0x86, 0x99, 0x1a, 0xb3, 0x2a, 0xfd, 0x3d, 0x2f, 0x7e, 0x75, 0x98, 0x89, 0x41, 0xf0, 0x9e,
	0xa1, 0xaf, 0xbf, 0x47, 0xc8, 0x06, 0x01, 0xa2, 0xf6, 0x1e, 0x1c, 0xa2, 0xbd, 0x47, 0x78, 0x86,
	0x0d, 0xa0, 0xaa, 0xf7, 0x60, 0x85, 0xec, 0xc3, 0xff, 0x35, 0xbe, 0x86, 0xf6, 0xfc, 0x4d, 0xcd,
	0x89, 0x94, 0x17, 0x5b, 0x97, 0x5e, 0x0f, 0xd0, 0x9d, 0xca, 0x02, 0x4f, 0x86, 0x30, 0xf8, 0xa5,
	0x45, 0xb6, 0x26, 0xda, 0x76, 0x68, 0x38, 0xc7, 0x30, 0x47, 0x96, 0x4f, 0x93, 0x2a, 0xa8, 0x3a,
	0x95, 0x90, 0x81, 0x9f, 0xfc, 0xc3, 0xf8, 0x5b, 0x0e, 0xff, 0x6f, 0x25, 0xbc, 0x28, 0x50, 0xb2,
	0x1b, 0xdc, 0xba, 0x27, 0x29, 0xa8, 0x20, 0x71, 0x00, 0x88, 0x8e, 0xaa, 0x82, 0x40, 0x27, 0xb4,
	0x6c, 0xaa, 0xf9, 0x2a, 0xb8, 0x1c, 0x43, 0xb0, 0xfd, 0x43, 0xbb, 0x98, 0xd6, 0x05, 0x37, 0x0d,
	0xcd, 0xfe, 0x09, 0xfa, 0xfa, 0x7d, 0xce, 0xc5, 0x34, 0xac, 0x11, 0xb9, 0x89, 0xa7, 0x1b, 0xde,
	0x55, 0x68, 0x73, 0x4f, 0x1e, 0xf8, 0x51, 0x0b, 0xe1, 0xdd, 0xc2, 0x4c, 0x34, 0x24, 0x8d, 0x1b,
	0x66, 0xed, 0x5a, 0xdb, 0x9c, 0x35, 0x9b, 0x41, 0xfb, 0xc5, 0xb3, 0x3f, 0xfb, 0xc3, 0x45, 0xeb,
	0x5d, 0xf8, 0xfb, 0x1d, 0xfc, 0xbd, 0xfd, 0xc7, 0x8b, 0xff, 0xf7, 0x71, 0xfe, 0x7f, 0x8d, 0x74,
	0xea, 0x5c, 0x42, 0x3e, 0xf8, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x3a, 0xa9, 0x65, 0x89,
	0x44, 0x00, 0x00,
}
